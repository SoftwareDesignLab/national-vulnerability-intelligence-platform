/**
 * Copyright 2021 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.exploit;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import edu.rit.se.nvip.db.DatabaseHelper;
import edu.rit.se.nvip.model.CompositeVulnerability;
import edu.rit.se.nvip.model.Exploit;
import edu.rit.se.nvip.model.Vulnerability;
import edu.rit.se.nvip.model.VulnerabilityAttribsForUpdate;
import edu.rit.se.nvip.utils.UtilHelper;

/**
 * 
 * Given a CVE list, this class identifies exploits that are related to them.
 * Exploits are supposed to be scraped by ExploitScraper earlier!
 * 
 * @author Ahmet Okutan
 *
 */
public class ExploitIdentifier extends Thread implements Runnable {
	private Logger logger = LogManager.getLogger(getClass().getSimpleName());
	DatabaseHelper databaseHelper = null;
	private List<CompositeVulnerability> vulnList;
	ExploitScraper exploitScraper = null;

	public ExploitIdentifier(List<CompositeVulnerability> vulnList, DatabaseHelper databaseHelper) {
		this.vulnList = vulnList;
		this.databaseHelper = databaseHelper;

		try {
			/**
			 * ExploitScraper is serialized and de-serialized. It scrapes the newly
			 * published exploits only. Existing exploits are derived from the de-serialized
			 * object. The existing or updated object is serialized each time
			 * ExploitScraper.getInstance() is invoked!
			 */
			exploitScraper = ExploitScraper.getInstance();
		} catch (Exception e1) {
			logger.error("Severe Error! Could not initialize the exploit scraper!! Skipping exploit identification step!");
		}
	}

	// run process
	public void run() {
		identifyAndSaveExploits(vulnList);
	}

	public String getRepoSummary() {
		if (exploitScraper != null) {
			int exploitCount = 0;
			for (String cveId : exploitScraper.getCveExploitMap().keySet()) {
				exploitCount += exploitScraper.getCveExploitMap().get(cveId).size();
			}
			return exploitScraper.getCveExploitMap().size() + " CVEs and " + exploitCount + " exploits in the repo!";
		}
		return "Error! Exploit scraper is not initialized! Please check exploit repo dir";
	}

	/**
	 * Extract and save exploits for CVEs in vulnList
	 * 
	 * @param vulnList
	 * @return
	 */
	public int identifyAndSaveExploits(List<CompositeVulnerability> vulnList) {

		if (exploitScraper == null) {
			logger.error("Exploit scraper is not initialized! Please check exploit repo dir!");
			return -1;
		}

		logger.info("Starting to identify exploits for {} CVEs.", vulnList.size());
		long start = System.currentTimeMillis();

		/**
		 * load existing vulnerabilities. this is supposed to be done once for during
		 * each run! Using a static map, to make sure each thread does not call this
		 * separately!
		 */
		Map<String, Vulnerability> existingVulnMap = databaseHelper.getExistingVulnerabilities();

		int numOfCVEsThatHadExploits = 0;
		for (CompositeVulnerability vulnerability : vulnList) {
			try {
				List<Exploit> exploitList = exploitScraper.getExploits(vulnerability.getCveId());
				if (exploitList.isEmpty())
					continue;

				numOfCVEsThatHadExploits++;
				databaseHelper.saveExploits(vulnerability, exploitList, existingVulnMap); // store all exploits in exploitScriptList into DB
			} catch (Exception e) {
				logger.error("Error while saving exploits for CVE {}, Exception: {}", vulnerability.getCveId(), e.toString());
			}
		}
		long elapsedTime = (System.currentTimeMillis() - start) / 1000;
		logger.info("Done! Searched exploits for {} CVEs! Elapsed time : {} seconds. Identified exploits for {} CVEs!", vulnList.size(), elapsedTime, numOfCVEsThatHadExploits);

		return numOfCVEsThatHadExploits;

	}

	/**
	 * create exploit objects using CVE & Exploit data. Exploit scripts are on the
	 * file system (recording paths only)!
	 * 
	 * @param exploitScriptList
	 * @return
	 */
	private List<Exploit> getExploits(CompositeVulnerability vulnerability, List<String> exploitScriptList) {
		List<Exploit> listExploit = new ArrayList<Exploit>();

		for (String exploitPath : exploitScriptList) {
			String now = UtilHelper.longDateFormat.format(new Date());
			Exploit exploit = new Exploit(vulnerability.getCveId(), 0, "Publish Date", "publisherUrl", "Description", exploitPath, now);
			listExploit.add(exploit);
		}
		return listExploit;
	}

}
