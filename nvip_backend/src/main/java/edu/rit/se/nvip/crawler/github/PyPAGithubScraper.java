package edu.rit.se.nvip.crawler.github;
import edu.rit.se.nvip.model.CompositeVulnerability;
import edu.rit.se.nvip.utils.GitController;
import edu.rit.se.nvip.utils.MyProperties;
import edu.rit.se.nvip.utils.PropertyLoader;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.awt.*;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

public class PyPAGithubScraper {

    private static MyProperties propertiesNvip;

    private final Logger logger = LogManager.getLogger(getClass().getSimpleName());

    private static final String pypaDir = "pypa-repo";

    private ArrayList<CompositeVulnerability> cves = new ArrayList<>();

    public PyPAGithubScraper() {
        propertiesNvip = new MyProperties();
        propertiesNvip = new PropertyLoader().loadConfigFile(propertiesNvip);

        // clone or update pypa/advisory-database repo
        updateGitRepo();
        // extract CVEs from YAML files in /vulns subdirectories
        extractCVEsFromVulns();
        // delete git repo once finished
    }

    public static void main(String[] args) {
        PyPAGithubScraper p = new PyPAGithubScraper();
    }

    private void extractCVEsFromVulns() {
        logger.info("Extracting CVEs from /vulns dir...");
        File vulnDir = Paths.get(propertiesNvip.getDataDir(), pypaDir, "vulns").toFile();
        File[] directories = vulnDir.listFiles();
        logger.info(Arrays.toString(directories));
        // loop through each dir in /vulns
        for (File subdir : directories) {
            // parse each file in current sub dir
            if (subdir.isDirectory()) {
//                logger.info("sub" + subdir.toString());
                File[] files = subdir.listFiles();
                for (File file : files ) {
//                    logger.info("---" + file.getName());
                    PyPAYamlFile parsedFile = new PyPAYamlFile(file);
                    ArrayList<String> cvesInFile = parsedFile.getCves();
                    for (String c : cvesInFile) {
                        cves.add(new CompositeVulnerability(
                                0, "", c, null, parsedFile.getPublished(), parsedFile.getModified(), parsedFile.getDetails(), ""
                                ));
                    }
                }
            }
        }
    }

    private void updateGitRepo() {
        // clone / pull to this local path
        Path gitFolder = Paths.get(propertiesNvip.getDataDir(), pypaDir);
        // clone / pull from this remote repository
        String remotePath = "https://github.com/pypa/advisory-database/";
        GitController gitController = new GitController(gitFolder.toString(), remotePath);

        File f = new File(gitFolder.toString());
        boolean pullDir = false;

        if (!f.exists())
            f.mkdirs();


        try {
            pullDir = f.exists() && Objects.requireNonNull(f.list()).length > 1;
        } catch (Exception ignored) {
        }

        if (pullDir) {
            if (gitController.pullRepo())
                logger.info("Pulled git repo at: " + remotePath + " to: " + gitFolder);
            else
                logger.error("Failed to pull git repo at: " + remotePath + " to: " + gitFolder);
        } else {
            if (gitController.cloneRepo())
                logger.info("Cloned git repo at: " + remotePath + " to: " + gitFolder);
            else
                logger.error("Could not clone git repo at: " + remotePath + " to: " + gitFolder);

        }
    }
}
