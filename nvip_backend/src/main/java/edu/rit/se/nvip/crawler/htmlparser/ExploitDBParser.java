/**
 * Copyright 2021 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.crawler.htmlparser;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import edu.rit.se.nvip.model.AffectedRelease;
import edu.rit.se.nvip.model.CompositeVulnerability;
import edu.rit.se.nvip.model.Product;
import edu.rit.se.nvip.productnameextractor.CpeLookUp;
import edu.rit.se.nvip.utils.UtilHelper;

/**
 *
 * @author axoeec
 *
 */
public class ExploitDBParser extends AbstractCveParser implements CveParserInterface {

	private Logger log = LogManager.getLogger(getClass().getSimpleName());
	
	public ExploitDBParser(String domainName) {
		sourceDomainName = domainName;
	}

	@Override
	public List<CompositeVulnerability> parseWebPage(String sSourceURL, String sCVEContentHTML) {
		List<CompositeVulnerability> vulnerabilities = new ArrayList<>();
		if (sSourceURL.contains("docs"))
			return vulnerabilities; // brings you to a pdf

		Set<String> uniqueCves = new HashSet<>();

		Document document = Jsoup.parse(sCVEContentHTML);

		String date = null;
		String platformName = null;
		String description = null;
		String lastModifiedDate = UtilHelper.longDateFormat.format(new Date());

		/*
		 * Find CVEs
		 */
		Elements possibleCves = document.getElementsByAttributeValue("name", "description");
		if (possibleCves.size() == 1) {
			Element cveElement = possibleCves.get(0);
			Pattern pattern = Pattern.compile(regexCVEID);
			Matcher matcher = pattern.matcher(cveElement.attr("content"));
			while (matcher.find())
				uniqueCves.add(matcher.group());
			String cves = "";
			for (String cve : uniqueCves)
				cves += cve + " ";
			// log.info("CVEs found: " + cves);
		} else {
			log.warn("Multiple elements with name=\"description\" at: " + sSourceURL);
		}

		if (uniqueCves.size() == 0) {
			log.warn("No CVEs found at: " + sSourceURL);
			UtilHelper.addBadUrl(sSourceURL, "No CVEs found");
			return vulnerabilities;
		}

		/*
		 * Find product
		 */
		Elements titles = document.getElementsByTag("title");
		if (titles.size() == 1) {
			platformName = titles.get(0).text();
		} else {
			log.warn("More than 1 title property: " + sSourceURL);
		}

		if (platformName == null) {
			log.warn("Platform is null: " + sSourceURL);
		}

		/*
		 * find date
		 */
		Elements possibleDates = document.getElementsByAttributeValue("property", "article:published_time");
		if (possibleDates.size() == 1) {
			date = possibleDates.get(0).attr("content");
		} else {
			System.err.println("Multiple date fields found at: " + sSourceURL);
		}

		/**
		 * get product id and version
		 */
		String version = null;
		Product affectedProduct = null;
		CpeLookUp affectedReleaseLoader = CpeLookUp.getInstance();
		if (platformName != null) {
			affectedProduct = affectedReleaseLoader.productFromDomain(platformName);
			if (affectedProduct != null) {
				Pattern pattern = Pattern.compile(regexVersionInfo);
				Matcher matcher = pattern.matcher(affectedProduct.getDomain());
				if (matcher.find())
					version = matcher.group();
			}
		}

		/**
		 * Find description
		 */
		Elements codeTags = document.getElementsByTag("code");
		if (codeTags.size() == 1) {
			description = codeTags.get(0).text();
		} else if (codeTags.size() == 0) {
			UtilHelper.addBadUrl(sSourceURL, "No description found");
			return vulnerabilities;
		} else {
			UtilHelper.addBadUrl(sSourceURL, "Multiple descriptions found");
		}
		if (uniqueCves.size() == 1) {
			String cveId = uniqueCves.iterator().next();
			// log.info(cveId + ": " + description);
			CompositeVulnerability vuln = new CompositeVulnerability(0, sSourceURL, cveId, null, date, lastModifiedDate, description, sourceDomainName);
			vulnerabilities.add(vuln);
		} else {
			String currDesc = "";
			String currentCve = null;
			Pattern pattern = Pattern.compile(regexCVEID);
			Matcher matcher = pattern.matcher(currDesc);
			for (String block : description.split("\n\n")) {
				matcher.reset(block);
				if (matcher.find()) {
					if (currentCve == null)
						currentCve = matcher.group();
					else {
						CompositeVulnerability vuln = new CompositeVulnerability(0, sSourceURL, currentCve, null, date, lastModifiedDate, currDesc, sourceDomainName);
						vulnerabilities.add(vuln);
						// log.info(currentCve + ": " + currDesc);
						currDesc = "";
						currentCve = matcher.group();
					}
				}
				currDesc += (block + "\n\n");
			}
			if (currentCve == null) {
				vulnerabilities.clear();
				for (String cve : uniqueCves) {
					// means that description is not separated into blocks based on CVEid
					// give all vulnerabilities the same description in this case
					CompositeVulnerability vuln = new CompositeVulnerability(0, sSourceURL, cve, null, date, lastModifiedDate, description, sourceDomainName);
					vulnerabilities.add(vuln);
				}
			} else {
				CompositeVulnerability vuln = new CompositeVulnerability(0, sSourceURL, currentCve, null, date, lastModifiedDate, currDesc, sourceDomainName);
				vulnerabilities.add(vuln);
			}
			// log.info(currentCve + ": " + currDesc);
		}

		if (affectedProduct != null) {
			// log.info("Product found: " + affectedProduct.getDomain());
			for (CompositeVulnerability vuln : vulnerabilities) {
				vuln.addAffectedRelease(new AffectedRelease(0, vuln.getCveId(), affectedProduct.getCpe(), date, version));
			}
		}

		return vulnerabilities;
	}
}
