package edu.rit.se.nvip.crawler.github;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.nd4j.shade.jackson.dataformat.yaml.YAMLParser;
import org.nd4j.shade.yaml.snakeyaml.Yaml;

import java.io.*;
import java.nio.file.Files;
import java.util.*;

public class PyPAYamlFile {

    private String id;
    private String details;
    private LinkedHashMap<String, Object> affected;
//    private Object affected;
    private ArrayList<Object> references;
    private ArrayList<String> aliases = new ArrayList<>();
    private String modified;
    private String published;

    private final Logger logger = LogManager.getLogger(getClass().getSimpleName());
    public PyPAYamlFile(File f) {

        try {
//            parse(f);
            logger.info("Extracting YAML file: " + f.getName());
            InputStream inputStream = Files.newInputStream(f.toPath());
            Yaml yaml = new Yaml();
            Map<String, Object> data = yaml.load(inputStream);
            this.id = data.get("id").toString();
            this.details = data.get("details").toString();
            // TODO: affected, references, objects  -> proper lists and access
    //        this.affected = (LinkedHashMap<String, Object>) ((ArrayList<?>)data.get("affected")).get(0);
            //TODO: null if no aliases found
            this.aliases = (ArrayList<String>) data.get("aliases");
            this.modified = data.get("modified").toString();
            this.published = data.get("published").toString();


        } catch (IOException fe) {
            logger.error("YAML Parser I/O exception for file: " + f.getName());
        }
    }

    private void parse(File f) throws IOException {

    }

    public String getDetails() { return this.details; }

    public String getModified() { return this.modified; }

    public String getPublished() { return this.published; }

    /**
     * access aliases and search for any alias that contains a CVE id
     */
    public ArrayList<String> getCves() {
        ArrayList<String> cves = new ArrayList<>();
        if (this.aliases != null) {
            for (String alias : this.aliases) {
                if (alias.contains("CVE-"))
                    cves.add(alias);
            }
        }
        return cves;
    }
}
