package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.model.CompositeVulnerability;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class MicrosoftParser extends AbstractCveParser {

    /**
     * Parse advisories listed to msrc.microsoft.com/update-guide/vulnerability
     * @param domainName - msrc domain
     */
    public MicrosoftParser(String domainName) { sourceDomainName = domainName; }

    @Override
    public List<CompositeVulnerability> parseWebPage(String sSourceURL, String sCVEContentHTML) {

        List<CompositeVulnerability> vulnList = new ArrayList<>();

        Document doc = Jsoup.parse(sCVEContentHTML);

        // extract CVE ID from top of page above "Security Vulnerability"
        Element cve = doc.select("span.css-242:contains(CVE)").first();
        String cveId = Objects.requireNonNull(cve).text();

        // extract released and last updated dates
        Element dates = doc.select("p:contains(Released)").first();
        String[] dateSplit = Objects.requireNonNull(dates).text().split("Last updated: ");
        String publishDate = dateSplit[0].trim();
        String lastModifiedDate = dateSplit[1];
        publishDate = publishDate.split(": ")[1].trim();

        // lack of a description on these pages
        // instead title + FAQ will be extracted
        Element titleEl = doc.select("h1.ms-fontWeight-semibold").first();
        String title = Objects.requireNonNull(titleEl).text();
        Element faqTitle = doc.select("h2:contains(FAQ)").first();
        String faq = Objects.requireNonNull(Objects.requireNonNull(faqTitle).nextElementSibling()).text();

        vulnList.add(new CompositeVulnerability(
           0, sSourceURL, cveId, null, publishDate, lastModifiedDate, title + faq, sourceDomainName
        ));

        return vulnList;
    }
}
