package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.model.CompositeVulnerability;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.util.ArrayList;
import java.util.List;

public class AliasRoboParser extends AbstractCveParser {

    /**
     * Parse advisories listed to github.com/aliasrobotics/RVD/issues
     * @param domainName - github alias domain
     */
    public AliasRoboParser(String domainName) { sourceDomainName = domainName; }

    @Override
    public List<CompositeVulnerability> parseWebPage(String sSourceURL, String sCVEContentHTML) {

        List<CompositeVulnerability> vulnList = new ArrayList<>();

        Document doc = Jsoup.parse(sCVEContentHTML);

        // grab labels from sidebar
        Element sidebar = doc.select("div.Layout-sidebar").first();
        Element labelHeader = sidebar.children().select("div.discussion-sidebar-heading:contains(Labels)").first();
        Element labels = labelHeader.nextElementSibling();
        // if labels contains vulnerability label, continue
        List<String> eachLabel = labels.children().select("span").eachText();
        if (!eachLabel.contains("vulnerability")) return vulnList;

        // get publish date from top 'opened' date
        String publishDate = "";
        Element header = doc.select("div#partial-discussion-header").first();
        if (header != null) {
            Element date = header.children().select("relative-time").first();
            publishDate = date.attr("title");
        }

        // get last modified date from bottommost github feed date
        String lastModifiedDate = "";
        Element discussionEl = doc.select("div.js-discussion").first();
        if (discussionEl != null) {
            Element lastDate = discussionEl.children().select("relative-time").last();
            lastModifiedDate = lastDate.attr("title");
        }
        else
            lastModifiedDate = publishDate;

        Element textBlockEl = discussionEl.children().select("td").first();
        String textBlock = textBlockEl.text();
        // get CVE id from "cve": or cve:
        String cveId = "";
        // get description from "description": or description:
        String description = "";

        // if we are in JSON notation
        if (textBlock.contains("{")) {
            String cveSplit = textBlock.split("\"cve\":")[1];
            cveId = cveSplit.split(",")[0];
            cveId = cveId.replace("\"", "");
            cveId = cveId.trim();

            String descSplit = textBlock.split("\"description\":")[1];
            description = descSplit.split(",")[0];
            description = description.replace("\"", "");
            description = description.trim();
        }
        // otherwise we are in YAML notation
        else {
            String cveSplit = textBlock.split("cve: ")[1];
            cveId = cveSplit.split("\r")[0];

            String descSplit = textBlock.split("description: ")[1];
            description = descSplit.split("\r")[0];
            description = description.replace("\"", "");
            description = description.trim();
        }

        vulnList.add(new CompositeVulnerability(
                0, sSourceURL, cveId, null, publishDate, lastModifiedDate, description, sourceDomainName
        ));

        return vulnList;
    }
}
