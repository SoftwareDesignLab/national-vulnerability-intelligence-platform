package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.model.CompositeVulnerability;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class GitHubAdvisoryParser extends AbstractCveParser {

    /**
     * Parse advisories listed to github.com/advisories
     * @param domainName - github domain
     */
    public GitHubAdvisoryParser(String domainName) { sourceDomainName = domainName; }

    @Override
    public List<CompositeVulnerability> parseWebPage(String sSourceURL, String sCVEContentHTML) {

        List<CompositeVulnerability> vulnList = new ArrayList<>();

        Document doc = Jsoup.parse(sCVEContentHTML);

        // first get CVE ID in right hand section
        Element cveIDHeader = doc.select("h3:contains(CVE ID)").first();
        String cveId = "";
        if (cveIDHeader != null)
            cveId = Objects.requireNonNull(cveIDHeader.nextElementSibling()).text();
        // if "No known CVE" or CVE section nonexistent, return empty list
        if (cveId.equals("") || cveId.contains("No known CVE")) return vulnList;

        // get description
        StringBuilder description = new StringBuilder();
        // grab p text until reaching a header. if impact header, skip
        Element descriptionElement = doc.select("div.markdown-body").first();
        if (descriptionElement != null) {
            for (Element child : descriptionElement.children()) {
                if (child.tagName().contains("h") && !child.text().contains("Impact")) break;
                else if (child.tagName().contains("h") && child.text().contains("Impact")) continue;
                description.append(child.text());
            }
        }

        // get publish and modified dates in top subhead description
        String publishDate = "";
        String lastModifiedDate = "";
        Element subhead = doc.select("div.Subhead-description").first();
        if (subhead != null) {
            Elements dates = subhead.select("relative-time");
            // non-formatted original dates found in 'title' attribute of our relative-date tags found
            if (dates.size() > 0) {
                publishDate = dates.get(0).attr("title");
                if (dates.size() > 1)
                    lastModifiedDate = dates.get(1).attr("title");
            }
        }

        vulnList.add(new CompositeVulnerability(
           0, sSourceURL, cveId, null, publishDate, lastModifiedDate, description.toString(), sourceDomainName
        ));

        return vulnList;
    }
}
