package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.model.CompositeVulnerability;
import org.junit.Test;

import java.util.List;

import static junit.framework.TestCase.*;

public class AcronisParserTest extends AbstractParserTest {

    // Single CVE above title
    @Test
    public void testAcronisSingle() {
        String html = safeReadHtml("src/test/resources/test-acronis-1.html");
        List<CompositeVulnerability> list = crawler.parseWebPage(
                "https://security-advisory.acronis.com/advisories/SEC-4092",
                html
        );
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2022-3405", vuln.getCveId());
        assertTrue(vuln.getDescription().contains("Code execution and sensitive information disclosure due"));
        assertEquals("November 17, 2022", vuln.getPublishDate());
        assertEquals("March 09, 2023", vuln.getLastModifiedDate());
    }

    // Multiple CVE, nothing above title, located in description
    @Test
    public void testAcronisMultiple() {
        String html = safeReadHtml("src/test/resources/test-acronis-2.html");
        List<CompositeVulnerability> list = crawler.parseWebPage(
                "https://security-advisory.acronis.com/advisories/SEC-5299",
                html
        );
        assertEquals(2, list.size());
        CompositeVulnerability vuln = getVulnerability(list, "CVE-2022-3602");
        assertNotNull(vuln);
        assertTrue(vuln.getDescription().contains("OpenSSL project team released a security advisory"));
        assertEquals("November 01, 2022", vuln.getPublishDate());
        assertEquals("November 01, 2022", vuln.getLastModifiedDate());
    }

}
