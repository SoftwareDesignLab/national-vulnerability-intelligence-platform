package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.model.CompositeVulnerability;
import org.junit.Test;

import java.util.List;

import static junit.framework.TestCase.*;
import static junit.framework.TestCase.assertEquals;

public class SnykParserTest extends AbstractParserTest {

    @Test
    public void testSnykCve() {
        String html = safeReadHtml("src/test/resources/test-snyk.html");
        List<CompositeVulnerability> list = crawler.parseWebPage(
                "https://security.snyk.io/vuln/SNYK-RUST-CRANELIFTCODEGEN-3357941",
                html
        );
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2023-26489", vuln.getCveId());
        assertTrue(vuln.getDescription().contains("translates code from an intermediate representation"));
        assertEquals("9 Mar 2023", vuln.getPublishDate());
    }

    @Test
    public void testSnykNoCve() {
        String html = safeReadHtml("src/test/resources/test-snyk-no.html");
        List<CompositeVulnerability> list = crawler.parseWebPage(
                "https://security.snyk.io/vuln/SNYK-PYTHON-BINGCHILLING2-3358386",
                html
        );
        assertEquals(0, list.size());
    }

    @Test
    public void testSnykCveDetailed() {
        String html = safeReadHtml("src/test/resources/test-snyk-details.html");
        List<CompositeVulnerability> list = crawler.parseWebPage(
                "https://security.snyk.io/vuln/SNYK-PHP-MOODLEMOODLE-3356645",
                html
        );
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2021-36401", vuln.getCveId());
        assertTrue(vuln.getDescription().contains("Escaping means that the application is coded to mark key char"));
        assertEquals("8 Mar 2023", vuln.getPublishDate());
    }
}
