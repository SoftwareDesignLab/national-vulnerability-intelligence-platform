package edu.rit.se.nvip.crawler.htmlparser;
import edu.rit.se.nvip.model.CompositeVulnerability;
import org.junit.Test;

import java.util.List;

import static junit.framework.TestCase.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class MozillaParserTest extends AbstractParserTest {

    MozillaParser mozillaParser = new MozillaParser("mozilla");

    @Test
    public void testMozzilaSingle() {
        String html = safeReadHtml("src/test/resources/test-mozilla-single.html");
        List<CompositeVulnerability> list = mozillaParser.parseWebPage(
                "https://www.mozilla.org/en-US/security/advisories/mfsa2021-06/",
                html
        );
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2020-16048", vuln.getCveId());
        assertEquals("February 5, 2021", vuln.getPublishDate());
        assertEquals("February 5, 2021", vuln.getLastModifiedDate());
        assertTrue(vuln.getDescription().contains("simply multiplied the row pitch with the pixel height"));
    }

    @Test
    public void testMozillaMultiple() {
        String html = safeReadHtml("src/test/resources/test-mozilla-multiple.html");
        List<CompositeVulnerability> list = mozillaParser.parseWebPage(
                "https://www.mozilla.org/en-US/security/advisories/mfsa2023-07/",
                html
        );
        assertEquals(13, list.size());
        CompositeVulnerability vuln = list.get(2);
        assertEquals("CVE-2023-25730", vuln.getCveId());
        assertEquals("February 15, 2023", vuln.getPublishDate());
        assertEquals("February 15, 2023", vuln.getLastModifiedDate());
        assertTrue(vuln.getDescription().contains("resulting in potential user confusion or spoofing attacks"));
        assertFalse(vuln.getDescription().contains("iframe's unredacted URI when interaction"));
    }
}
