package edu.rit.se.nvip.crawler.htmlparser;
import edu.rit.se.nvip.model.CompositeVulnerability;
import org.junit.Test;

import java.util.List;

import static junit.framework.TestCase.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class IntelParserTest extends AbstractParserTest {

    IntelParser intelParser = new IntelParser("intel");

    @Test
    public void testIntelSingle() {
        String html = safeReadHtml("src/test/resources/test-intel-single.html");
        List<CompositeVulnerability> list = intelParser.parseWebPage(
                "https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00700.html",
                html
        );
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2022-21216", vuln.getCveId());
        assertEquals("02/14/2023", vuln.getPublishDate());
        assertEquals("02/14/2023", vuln.getLastModifiedDate());
        assertTrue(vuln.getDescription().contains("potentially enable escalation of privilege via adjacent network access"));
    }

    @Test
    public void testIntelMultiple() {
        String html = safeReadHtml("src/test/resources/test-intel-multiple.html");
        List<CompositeVulnerability> list = intelParser.parseWebPage(
                "https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00714.html",
                html
        );
        assertEquals(5, list.size());
        CompositeVulnerability vuln = list.get(2);
        assertEquals("CVE-2022-26840", vuln.getCveId());
        assertEquals("02/14/2023", vuln.getPublishDate());
        assertEquals("02/14/2023", vuln.getLastModifiedDate());
        assertTrue(vuln.getDescription().contains("Improper neutralization in the Intel"));
        assertFalse(vuln.getDescription().contains("Improper authentication in the Intel"));
    }
}
