package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.model.CompositeVulnerability;
import org.junit.jupiter.api.Test;


import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class CurlParserTest extends AbstractParserTest {

    @Test
    public void testCurl0() {
        //https://curl.se/docs/CVE-2023-23916.html
        String html = safeReadHtml("src/test/resources/test-curl.html");
        List<CompositeVulnerability> list = new CurlParser("curl").parseWebPage("curl", html);
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2023-23916", vuln.getCveId());
        assertEquals("2023/02/15 00:00:00", vuln.getPublishDate());
        assertTrue(vuln.getDescription().contains("\"chained\" HTTP compression algorithms"));
        assertTrue(vuln.getDescription().contains("Automatic decompression of content needs to be enabled"));
    }

    @Test
    public void testCurl1() {
        //https://curl.se/docs/CVE-2022-43552.html
        String html = safeReadHtml("src/test/resources/test-curl-1.html");
        List<CompositeVulnerability> list = new CurlParser("curl").parseWebPage("curl", html);
        assertEquals(1, list.size());
        CompositeVulnerability vuln = list.get(0);
        assertEquals("CVE-2022-43552", vuln.getCveId());
        assertEquals("2022/12/21 00:00:00", vuln.getPublishDate());
        assertTrue(vuln.getDescription().contains("curl can be asked to tunnel"));
        assertTrue(vuln.getDescription().contains("introduced for TELNET"));
    }
}