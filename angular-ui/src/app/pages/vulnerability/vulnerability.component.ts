/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import {
  faSpinner,
  faAngleDoubleLeft,
  faAngleDoubleRight,
  faAngleLeft,
  faAngleRight,
} from '@fortawesome/free-solid-svg-icons';
import { VulnService } from 'src/app/services/vuln/vuln.service';
import { Vulnerability } from 'src/app/models/vulnerability.model';
import { CookieService } from 'src/app/services/Cookie/cookie.service';
import { Session } from 'src/app/services/Auth/auth-service.service';

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.css'],
})
export class VulnerabilityComponent {
  faSpinner = faSpinner;
  faAngleDoubleLeft = faAngleDoubleLeft;
  faAngleDoubleRight = faAngleDoubleRight;
  faAngleRight = faAngleRight;
  faAngleLeft = faAngleLeft;
  vuln = {} as Vulnerability;
  loading = true;

  constructor(
    private vulnService: VulnService,
    private route: ActivatedRoute,
    private cookieService: CookieService
  ) {
    this.route.params.subscribe((params) => this.init(params['id']));
  }

  /** ensure the user is signed on when navigating to this page */
  init(id: string) {
    var session: Session = this.cookieService.get('nvip_user');
    this.vulnService
      .getByID(id, session.userName, session.token)
      .subscribe((res: any) => {
        this.vuln = res;
        this.loading = false;
      });
  }

  /** legacy open tab function - handles style changes and page update when clicking on a different tab */
  openTab(tabClass: string) {
    var x = document.getElementsByClassName(
      'vuln-tab'
    ) as HTMLCollectionOf<HTMLElement>;
    var tabButtons = document.getElementsByClassName(
      'vuln-tab-button'
    ) as HTMLCollectionOf<HTMLElement>;
    for (let i = 0; i < x.length; i++) {
      if (x[i].classList.contains(tabClass)) {
        x[i].style.display = 'block';
        tabButtons[i].style.backgroundColor = '#ffffff';
      } else {
        x[i].style.display = 'none';
        tabButtons[i].style.backgroundColor = '#f0f0f0';
      }
    }
  }

  /** legacy sort function to sort VDO labels tab */
  sortVdoList() {
    if (this.vuln.vdoList)
      return this.vuln.vdoList.sort(function (vdo1, vdo2) {
        var nounGroup1 = vdo1.vdoNounGroup;
        var nounGroup2 = vdo2.vdoNounGroup;

        var nounGroupCmp = nounGroup1.localeCompare(nounGroup2);

        if (nounGroupCmp == 0) {
          if (vdo1.vdoConfidence == vdo2.vdoConfidence) {
            var label1 = vdo1.vdoLabel;
            var label2 = vdo2.vdoLabel;

            return label1.localeCompare(label2);
          } else if (vdo1.vdoConfidence > vdo2.vdoConfidence) {
            return -1;
          } else {
            return 1;
          }
        } else {
          return nounGroupCmp;
        }
      });
    else return [];
  }
}
