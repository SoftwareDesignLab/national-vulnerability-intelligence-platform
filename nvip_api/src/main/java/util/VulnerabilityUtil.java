/**
 * Copyright 2021 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the �Software�), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED �AS IS�, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package util;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import model.CvssScore;
import model.Product;
import model.VdoCharacteristic;

/**
 * Utility fuctions for generating Vulnerability (CVE) objects
 * @author Andrew
 *
 */
public class VulnerabilityUtil {
	private static Logger logger = LogManager.getLogger(VulnerabilityUtil.class.getSimpleName());

	/**
	 * Helper function for parsing strngs containing query results
	 * @param str
	 * @return
	 */
	public static String[] parseArray(String str) {
		if (str == null || str == "")
			return new String[0];

		return str.split(";");
	}

	/**
	 * Adds a new Score for each CVSS Type,
	 * A Scores are stored in a new CVE
	 * @param cve
	 * @param baseSeverityArrStr
	 * @param severityConfidenceArrStr
	 * @param impactScoreArrStr
	 * @param impactConfidenceArrStr
	 * @return
	 */
	public static CvssScore[] parseCvssScoreList(String cve, String baseSeverityArrStr, String severityConfidenceArrStr, String impactScoreArrStr, String impactConfidenceArrStr) {

		String[] baseSeverityArr = parseArray(baseSeverityArrStr);
		String[] severityConfidenceArr = parseArray(severityConfidenceArrStr);
		String[] impactScoreArr = parseArray(impactScoreArrStr);
		String[] impactConfidenceArr = parseArray(impactConfidenceArrStr);
		
		return parseCvssScoreList(cve, baseSeverityArr, severityConfidenceArr, impactScoreArr, impactConfidenceArr);
	}

	/**
	 * Parses CVSS Score data for each CVE received in the search query
	 * @param vdoCve
	 * @param vdoLabelArrStr
	 * @param vdoConfArrStr
	 * @param vdoNounGroupArrStr
	 * @return
	 */
	public static CvssScore[] parseCvssScoreList(String cve, String[] baseSeverityArr, String[] severityConfidenceArr, String[] impactScoreArr, String[] impactConfidenceArr) {
		
		if (baseSeverityArr.length == 0 || baseSeverityArr.length != severityConfidenceArr.length)
			return new CvssScore[0];

		CvssScore[] cvssScoreArr = new CvssScore[baseSeverityArr.length];
		for (int i = 0; i < baseSeverityArr.length; i++)
			cvssScoreArr[i] = new CvssScore(cve, baseSeverityArr[i], Double.parseDouble(severityConfidenceArr[i]), impactScoreArr[i], Double.parseDouble(impactConfidenceArr[i]));

		return cvssScoreArr;
	}

	/**
	 * Adds a new Product for each CPE
	 * All products are stored in a CVE
	 * @param productIdArrStr
	 * @param cpeArrStr
	 * @param domainArrStr
	 * @param versionArrStr
	 * @param delimiter
	 * @param remove
	 * @return
	 */
	public static Product[] parseProductList(String productIdArrStr, String cpeArrStr, String domainArrStr, String versionArrStr) {
		String[] productIdArr = parseArray(productIdArrStr);
		String[] cpeArr = parseArray(cpeArrStr);
		String[] domainArr = parseArray(domainArrStr);
		String[] versionArr = parseArray(versionArrStr);

		return parseProductList(productIdArr, cpeArr, domainArr, versionArr);
	}

	/**
	 * Parses Product data for each CVE received in the search query
	 * @param vdoCve
	 * @param vdoLabelArrStr
	 * @param vdoConfArrStr
	 * @param vdoNounGroupArrStr
	 * @return
	 */
	public static Product[] parseProductList(String[] productIdArr, String[] cpeArr, String[] domainArr, String[] versionArr) {

		if (cpeArr.length == 0 || cpeArr.length != domainArr.length || cpeArr.length != versionArr.length)
			return new Product[0];

		Product[] productArr = new Product[cpeArr.length];

		for (int i = 0; i < cpeArr.length; i++) {
			productArr[i] = new Product(Integer.parseInt(productIdArr[i]), cpeArr[i], domainArr[i], null, versionArr[i]);
		}

		// remove duplicate CPE products
		// in case we are taking from vulnerabilityaggregate call
		Set<String> stringCPEs = new HashSet<>();
		List<Product> productList = new ArrayList<>();
		for (Product product: productArr) {
			if (stringCPEs.add(product.toString()))
				productList.add(product);
		}

		return productList.toArray(new Product[productList.size()]);
	}
	
	
	
	/**
	 * Parses VDO data for each CVE received in the search query
	 * @param vdoCve
	 * @param vdoLabelArrStr
	 * @param vdoConfArrStr
	 * @param vdoNounGroupArrStr
	 * @return
	 */
	public static VdoCharacteristic[] parseVDOList(String vdoCve, String vdoLabelArrStr, String vdoConfArrStr, String vdoNounGroupArrStr) {
		String[] vdoLabelArr = parseArray(vdoLabelArrStr);
		String[] vdoConfArr = parseArray(vdoConfArrStr);
		String[] vdoNounGroupArr = parseArray(vdoNounGroupArrStr);

		return parseVDOList(vdoCve, vdoLabelArr, vdoConfArr, vdoNounGroupArr);
	}
	
	/**
	 * Adds a new VDO Characteristic for each VDOLabel that was parsed
	 * Generated VDOCharacteristics will be contained in a CVE
	 * @param vdoCve
	 * @param vdoLabelArrStr
	 * @param vdoConfArrStr
	 * @param vdoNounGroupArrStr
	 * @return
	 */
	public static VdoCharacteristic[] parseVDOList(String vdoCve, String[] vdoLabelArr, String[] vdoConfArr, String[] vdoNounGroupArr) {
		if (vdoLabelArr.length == 0 || vdoLabelArr.length != vdoConfArr.length || vdoLabelArr.length != vdoNounGroupArr.length)
			return new VdoCharacteristic[0];

		VdoCharacteristic[] vdoArr = new VdoCharacteristic[vdoLabelArr.length];
		for (int i = 0; i < vdoLabelArr.length; i++)
			vdoArr[i] = new VdoCharacteristic(vdoCve, vdoLabelArr[i], Double.parseDouble(vdoConfArr[i]), vdoNounGroupArr[i]);

		// remove duplicate VDO characteristics
		// in case we are not taking from vulnerabilityaggregate call
		Set<String> stringVDOs = new HashSet<>();
		List<VdoCharacteristic> vdoList = new ArrayList<>();
		for (VdoCharacteristic vdo: vdoArr) {
			if (stringVDOs.add(vdo.toString()))
				vdoList.add(vdo);
		}

		return vdoList.toArray(new VdoCharacteristic[vdoList.size()]);
	}
	
	
	public static String[] repeat(String repeat, int times) {
		String[] arr = new String[times];

		for (int i = 0; i < arr.length; i++) {
			arr[i] = repeat;
		}

		return arr;
	}

	
	/**
	 * Get domain name from CVE source
	 * 
	 * @param url
	 * @return
	 * @throws URISyntaxException
	 */
	public static String getDomainName(String url) {
		String domain = url;
		;
		try {
			URI uri = new URI(url);
			domain = uri.getHost();
		} catch (URISyntaxException e) {
			logger.error(e.toString());
			e.printStackTrace();
		}
		return domain.startsWith("www.") ? domain.substring(4) : domain;
	}

	public static String getCompanyProduct(String cpe) {
		String[] parts = cpe.split(":");
		if (parts.length > 4)
			return parts[3] + "-" + parts[4];
		return "Unknown";

	}
}
