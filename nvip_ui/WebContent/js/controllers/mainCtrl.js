app.controller('MainController', [ '$scope', '$http', '$routeParams', '$cookieStore', function($scope, $http, $routeParams, $cookieStore) {
     
    $http.defaults.headers.post["Content-Type"] = "application/x-www-form-urlencoded; charset=utf-8";
    
    $scope.init = function () {
    	$scope.toggleLoadingScreen(true, "nvip-daily-graph-box");
    	$scope.countGraphs();
    };
    
    /** Controller Functions **/
    $scope.countGraphs = function () {
    	
    	var username = $cookieStore.get('nvip_user').username;
		var token = $cookieStore.get('nvip_user').token;
				
		if (username==null || username=="" || token==null || token==""){
			alert("You are not logged in!");
			$cookieStore.remove('nvip_user');
			window.location.reload();
		}
    	
    	$http({
            url : 'mainServlet',
            method : "GET",  
            params : {countGraphs: "all", username: username, token: token}       
        }).then(function(response) {
            $scope.countGraphs = {};
            
            angular.forEach(response.data.map.mainPageCounts.map, function(value, key) {
            	$scope.countGraphs[key] = value;
            });
            
			$scope.loadGraphs();
            $scope.toggleLoadingScreen(false, "nvip-daily-graph-box");
        }, function(response) {
        	if (response.status == 401){
            	alert(response.data);
            	window.location.assign(window.location.href+"login");
            }
           
            console.log("Failure -> " + response.data);
            //$scope.countGraphs = response.data.map;
        });
	};
    
	$scope.toggleLoadingScreen = function(loading, className){
		if(className == "nvip-daily-graph-box"){
    		var graphBox = document.getElementsByClassName("nvip-daily-graph-box")[0];
			var loadingScreen = graphBox.getElementsByClassName("nvip-loading-screen")[0];
			var circleGraphs = graphBox.getElementsByClassName("nvip-circle-graph");
    		if(loading){
    			loadingScreen.style.display = 'block';
				angular.forEach(circleGraphs, function(circleGraph, index) {
					circleGraph.style.display = 'none';
				});
    		} 
    		else {
    			loadingScreen.style.display = 'none';
				angular.forEach(circleGraphs, function(circleGraph, index) {
					circleGraph.style.display = 'block';
				});
    		}
    	}
    		
    }

	$scope.loadGraphs = function() {
		
		
		//Bar Graph
		google.charts.load('current', {'packages':['bar', 'corechart', 'line']});
    	google.charts.setOnLoadCallback(setGraphs);

	    function setGraphs() {
		
		//Bar Graph Init
	      var barData = google.visualization.arrayToDataTable([
	        ["", "# of CVEs", {role: 'style'}],
	        ["Total CVEs", parseInt($scope.countGraphs.totalCveCount), 'color: red'],
	        ["CVEs Added Today", parseInt($scope.countGraphs.avgCvesAdded), 'color: blue'],
	        ["CVEs Updated Today", parseInt($scope.countGraphs.avgCvesUpdated), 'color: green'],
	      ]);

		//Area Graph Init
		  var areaData = new google.visualization.DataTable();
	  
		  areaData.addColumn("string", ""); //run date time
		  areaData.addColumn("number", "CVEs Not In Mitre");
		  areaData.addColumn("number", "CVEs Not In NVD");
			
          var dates = $scope.countGraphs.run_date_times.split(";");		  
          var nNVD = $scope.countGraphs.not_in_nvd_count.split(";");
	      var nMitre = $scope.countGraphs.not_in_mitre_count.split(";");

		  for (var i = 0; i < 5; i++) {
		  	areaData.addRow([dates[i], parseInt(nNVD[i]), parseInt(nMitre[i])]);
		  }

		//Line Graph Init
		var lineData = new google.visualization.DataTable();
	  
		  lineData.addColumn("string", ""); //run date time
		  lineData.addColumn("number", "Avg. Time Gap From NVD");
		  lineData.addColumn("number", "Avg. Time Gap From Mitre");

		  var dates = $scope.countGraphs.run_date_times.split(";");		  
          var avgNVD = $scope.countGraphs.avgTimeGapNvd.split(";");
	      var avgMitre = $scope.countGraphs.avgTimeGapMitre.split(";");

		  for (var i = 0; i < 5; i++) {
			if (avgNVD[i] != null && avgMitre[i] != null) {
			  	lineData.addRow([dates[i], parseInt(avgNVD[i]), parseInt(avgMitre[i])]);
			}
		  }
		
		//Bar graph style
	      var barOptions = {
	        legend: { position: 'none' },
	        bar: { groupWidth: "60%" },
			height: 220,
			width: 410,
			backgroundColor: {
				fill: '#0c204c',	
			},
			chartArea: {
				backgroundColor: '#0c204c',
			},
			vAxis: {
				gridlines: {
					color: 'white'
				},
				baselineColor:'white',
				textStyle: {
					color: 'white'
				}
			},
			hAxis: {
				baselineColor: 'white',
				textStyle: {
					color: 'white'
				}
			}
		};
		
		//Area graph style
	      var areaOptions = {
				legend: {
					textStyle: {
						color: 'white'
					}
				},
				backgroundColor: {
					fill: '#0c204c',	
				},
				chartArea: {
					backgroundColor: '#0c204c',
				},
				height: 220,
				width: 500,
				vAxis: {
					gridlines: {
						color: 'white'
					},
					baselineColor:'white',
					textStyle: {
						color: 'white'
					}
				},
				hAxis: {
					titleTextStyle: 
						{ 
							color: 'white'
						},
					baselineColor: 'white',
					textStyle: {
						color: 'white'
					}
				}
		  };

		//Line graph style
	      var lineOptions = {
				legend: {
					textStyle: {
						color: 'white'
					}
				},
				backgroundColor: {
					fill: '#0c204c',	
				},
				chartArea: {
					backgroundColor: '#0c204c',
				},
				height: 220,
				width: 500,
				vAxis: {
					gridlines: {
						color: 'white'
					},
					baselineColor:'white',
					textStyle: {
						color: 'white'
					}
				},
				hAxis: {
					titleTextStyle: 
						{ 
							color: 'white'
						},
					baselineColor: 'white',
					textStyle: {
						color: 'white'
					}
				}
		  };
	      
		  var barChart = new google.charts.Bar(document.getElementById('columnchart_values'));
     
		  var areaChart = new google.charts.Line(document.getElementById('areachart_values'));

		  var lineChart = new google.charts.Line(document.getElementById('linechart_values'));

		  barChart.draw(barData, google.charts.Bar.convertOptions(barOptions));

		  areaChart.draw(areaData, google.charts.Line.convertOptions(areaOptions));

		  lineChart.draw(lineData, google.charts.Line.convertOptions(lineOptions));
	  }
		
		/*
		//Line graph
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {

      		var data = new google.visualization.DataTable();
      		data.addColumn('number', 'Day');
	        data.addColumn('number', 'Guardians of the Galaxy');
	        data.addColumn('number', 'The Avengers');
	        data.addColumn('number', 'Transformers: Age of Extinction');
	
	        data.addRows([
		        [1,  37.8, 80.8, 41.8],
		        [2,  30.9, 69.5, 32.4],
		        [3,  25.4,   57, 25.7],
		        [4,  11.7, 18.8, 10.5],
		        [5,  11.9, 17.6, 10.4],
		        [6,   8.8, 13.6,  7.7],
		        [7,   7.6, 12.3,  9.6],
		        [8,  12.3, 29.2, 10.6],
		        [9,  16.9, 42.9, 14.8],
		        [10, 12.8, 30.9, 11.6],
		        [11,  5.3,  7.9,  4.7],
		        [12,  6.6,  8.4,  5.2],
		        [13,  4.8,  6.3,  3.6],
		        [14,  4.2,  6.2,  3.4]
	        ]);
	
	        var options = {
		        chart: {
		          title: 'Box Office Earnings in First Two Weeks of Opening',
		          subtitle: 'in millions of dollars (USD)'
		        },
		        width: 350,
		        height: 400,
		        axes: {
		          x: {
		            0: {side: 'top'}
		          }
		        }
      		};

      		var chart = new google.charts.Line(document.getElementById('linechart_values'));

      		chart.draw(data, google.charts.Line.convertOptions(options));
    }*/

		
	
	}
	
	/** Initialization code **/
    $scope.init();
	
	
} ]);