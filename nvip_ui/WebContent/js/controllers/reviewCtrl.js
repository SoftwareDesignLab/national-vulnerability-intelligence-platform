app.controller('ReviewController', [ '$scope', '$rootScope', '$http', '$routeParams', function($scope, $rootScope, $http, $routeParams) {
     
    $http.defaults.headers.post["Content-Type"] = "application/x-www-form-urlencoded; charset=utf-8";
    
    $scope.showForm = true;
        
    $scope.totalCVEs = 0;
    $scope.currentCVE = {};
    $scope.currentCVEnum = 0;
    $scope.currentCVEnumDisplay = 0;
    $scope.currentCVEid = 'CVE-ID HERE';
    
    $scope.review = {};
    $scope.review.currentCVEdesc = "CVE DESCRIPTION IS HERE.";
     
    // Search Result Parameters
    $scope.searchResults = {};
    
    //for pages
    $scope.itemsPerPage = 20;
    $scope.cveToShow = [];
    $scope.currentPage = 0;
    $scope.totalPages = 0;
    
    
    $scope.vdoGroupList = ['ImpactMethod', 'Context', 'Mitigation', 'AttackTheater', 'LogicalImpact'];
    $scope.ctxList = ['Hypervisor', 'Firmware', 'Host OS', 'Guest OS', 'Application', 'Channel', 'Physical Hardware'];
    $scope.impctList = ['Context Escape', 'Trust Failure', 'Authentication Bypass', 'Man-in-the-Middle', 'Code Execution'];
    $scope.mitigationList = ['ASLR', 'MultiFactor Authentication', 'Sandboxed', 'HPKP/HSTS', 'Physical Security'];
    $scope.attckThtrList = ['Remote', 'Limited Rmt', 'Local', 'Physical'];
    $scope.lgclImpctList = ['Write', 'Read', 'Resource Removal', 'Service Interrupt', 'Indirect Disclosure', 'Privilege Escalation'];
    
    
    $scope.init = function () {
    	$scope.review.curDate = new Date();
    	$scope.review.curDate = formatDate($scope.review.curDate);
    	$scope.review.jumpTo = $scope.currentCVEnumDisplay;
    	
    	$scope.toggleLoading();
    	
    	$scope.searchCVEs();
    	
//    	$scope.testArray.push({name:"one"});
//    	$scope.testArray.push({name:"two"});
//    	$scope.testArray.push({name:"three"});
//    	$scope.testArray.push({name:"four"});
//    	$scope.testArray.push({name:"five"});
    	
    	
    };   
    
    /** Controller Functions **/
    
    $scope.manualCheck = function(item){
    	var state = document.getElementById("ch"+item).checked;
    	if(state){
    		$scope.enableRBgroup(item);
    	}
    	else{
    		$scope.disableRBgroup(item);
    	}
    }
    
    $scope.disableAllRB = function(){
    	$scope.ctxList.forEach($scope.disableRBgroup);
        $scope.impctList.forEach($scope.disableRBgroup);
        $scope.mitigationList.forEach($scope.disableRBgroup);
        $scope.attckThtrList.forEach($scope.disableRBgroup);
        $scope.lgclImpctList.forEach($scope.disableRBgroup);
    	
    }
    
    $scope.enableAllRB = function(){
    	$scope.ctxList.forEach($scope.enableRBgroup);
    	$scope.impctList.forEach($scope.enableRBgroup);
        $scope.mitigationList.forEach($scope.enableRBgroup);
        $scope.attckThtrList.forEach($scope.enableRBgroup);
        $scope.lgclImpctList.forEach($scope.enableRBgroup);
    }
    
    $scope.disableRBgroup = function(rbName) {
    	$scope.disableRB("high"+rbName,true);
    	$scope.disableRB("medium"+rbName,true);
    	$scope.disableRB("low"+rbName,true);
    	$scope.uncheckCB(rbName);
    	document.getElementById("div"+rbName).removeAttribute('class');
    	document.getElementById("div"+rbName).classList.add("review-unchecked-vdo");
    }
    
    $scope.enableRBgroup = function(rbName) {
    	$scope.disableRB("high"+rbName,false);
    	$scope.disableRB("medium"+rbName,false);
    	$scope.disableRB("low"+rbName,false);
    	$scope.check("high"+rbName, true);
    	
    	document.getElementById("div"+rbName).removeAttribute('class');
    	document.getElementById("div"+rbName).classList.add("review-high-confidence");
    }
    
    $scope.enableRBgroup = function(rbName, confidence) {
    	document.getElementById("div"+rbName).removeAttribute('class');
    	$scope.disableRB("high"+rbName,false);
    	$scope.disableRB("medium"+rbName,false);
    	$scope.disableRB("low"+rbName,false);
    	if(confidence<=0.33){
    		$scope.check("low"+rbName, true);
    		document.getElementById("div"+rbName).classList.add("review-low-confidence");
    	}
    	else if(confidence>0.33 && confidence<=0.66){
    		$scope.check("medium"+rbName, true);
    		document.getElementById("div"+rbName).classList.add("review-medium-confidence");
    	}
    	else{
    		$scope.check("high"+rbName, true);
    		document.getElementById("div"+rbName).classList.add("review-high-confidence");
    	}	
    }
    
    $scope.disableRB = function(rbID, disabledState){
    	document.getElementById(rbID).disabled = disabledState;
    }
    
    $scope.uncheckCB = function(name){
    	$scope.check('ch'+name,false);
    }
    $scope.checkCB = function(name){
    	$scope.check('ch'+name,true);
    }
    
    $scope.check = function(elementID, state) {
        document.getElementById(elementID).checked = state;
    }
    
    $scope.select = function(cveItem, $index) {
    	$scope.currentCVEnum = $scope.currentPage*$scope.itemsPerPage + $index;
        $scope.selected = cveItem;
        $scope.getCVEdetails(cveItem.cve_id);
//        $scope.review.currentCVEdesc = cveItem.description;
      };
    
    function formatDate(date) {
        return date.getFullYear() + '-' + ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)))  + '-' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate()));
    }
    
    $scope.showPage = function(pageNum){
    	if ($scope.searchResults.length<1 || pageNum<0){
    		return;
    	}
    	
    	var startIndex = pageNum * $scope.itemsPerPage;
    	
    	if (startIndex >= $scope.searchResults.length){
    		return;
    	}
    	
    	$scope.currentPage = pageNum;
    	$scope.review.jumpTo = pageNum + 1;
    	$scope.cveToShow = [];
    	var i;
    	for (i=startIndex; i<startIndex+$scope.itemsPerPage && i<$scope.searchResults.length; i++){
    		$scope.cveToShow.push($scope.searchResults[i]);
    	}
    }
    
    $scope.nextPage = function(){
		$scope.showPage($scope.currentPage + 1);
	}
	
	$scope.prevPage = function(){
		$scope.showPage($scope.currentPage - 1);
	};
	
	$scope.goToPage = function(){
		$scope.showPage($scope.review.jumpTo-1);
	}	
    
    $scope.updateCVE = function () {
		// Retrieve the search form button and disable it
		
		$scope.toggleLoading(null,true);
		
		$http({
            url : 'reviewServlet',
            method : "POST",  
            params : {vulnID : $scope.currentCVE.vulnId, description:$scope.review.currentCVEdesc, updateInfo:true}       
        }).then(function(response) {
                       
            // Hide the loading bar now that the results have arrived
            $scope.toggleLoading(null,false);

            
        }, function(response) {
            console.log("Failure -> " + response.data);
            
            // Hide the loading bar now that request has failed
            $scope.toggleLoading(null,false);
            
        });
	};
	
	$scope.getCVEdetails = function (cveID) {
		// Retrieve the search form button and disable it
		
		$scope.toggleLoading(null,true);
		
		$http({
            url : 'reviewServlet',
            method : "GET",  
            params : {cveID : cveID}       
        }).then(function(response) {
            //console.log(response.data);
            
        	$scope.cveDetails = response.data;
        	$scope.processDetails();

            // Hide the loading bar now that the results have arrived
            $scope.toggleLoading(null,false);
            
        }, function(response) {
            console.log("Failure -> " + response.data);
            
            // Hide the loading bar now that request has failed
            $scope.toggleLoading(null,false);
            
            $scope.review.currentCVEdesc = '';
        	$scope.cveDetails = '';
        });
	};
	
	$scope.processDetails = function(){
		$scope.review.currentCVEdesc = $scope.cveDetails.description;
		
		var vdoGroups = $scope.cveDetails.vdoGroups;
		$scope.disableAllRB();
		
		for ([group, groupValue] of Object.entries(vdoGroups)){
			var groupLabels = groupValue.vdoLabel;
			for ([vdoLabel, vdoConfidence] of Object.entries(groupLabels)){
				$scope.checkCB(vdoLabel);
				$scope.enableRBgroup(vdoLabel, vdoConfidence);
			}
		}	    
	}
	
	$scope.yyyymmddToLocalDate = function(isoString) {
		  const [year, month, day] = isoString.split('-');
		  return new Date(year, month - 1, day);
		}
	
	$scope.nextDay = function(){
		$scope.addDays(1);
		$scope.searchCVEs();
	}
	
	$scope.prevDay = function(){
		$scope.addDays(-1);
		$scope.searchCVEs();
	}
	
	$scope.addDays = function(days){
		var newDate = new Date($scope.yyyymmddToLocalDate($scope.review.curDate));
		newDate.setDate(newDate.getDate()+days);
		$scope.review.curDate = formatDate(newDate);
	}
    
	/**
	 * Queries the database for vulnerabilities matching the search criteria entered 
	 * in the search form.
	 * @param {Object} event - (Optional) Event object from Search Form submit button. 
	 * If is null, coming from another source (i.e. loading adding entries from paging bar) 
	 * that does not need to switch the Search Form appearance.
	 * @param {number} limitCount - (Optional) Number of entries that will be requested from the database 
	 * @param {boolean} isBefore - (Optional) Used to determine if the retrieved values will be from an earlier index (vulnId)
	 * than the one used for the query. Based on page number
	 */
	$scope.searchCVEs = function () {
		// Retrieve the search form button and disable it
		
		var selectedDate = $scope.review.curDate;
		
		$scope.toggleLoading(null,true);
		
		$http({
            url : 'reviewServlet',
            method : "GET",  
            params : {searchDate : selectedDate}       
        }).then(function(response) {
            //console.log(response.data);
            $scope.resultTotalCount = response.data.pop(response.data.length-1);
            $scope.totalCVEs = $scope.resultTotalCount;
            $scope.searchResults = response.data;
            
            
            if ($scope.totalCVEs>0){
//            	$scope.showCVE(0);
            	$scope.totalPages = Math.ceil($scope.totalCVEs/$scope.itemsPerPage);
            	$scope.showPage(0);
            }
            else{
//            	$scope.currentCVEnum = 0;
//    			$scope.currentCVEnumDisplay = 0;
//    			$scope.currentCVE = {};
//    			$scope.currentCVEid = "";
//    			$scope.currentCVEdesc = "";
            	$scope.cveToShow=[];
            }
            
//            $scope.filteredSearchResults = $scope.searchResults.slice($scope.pageOffset, ($scope.pageOffset + $scope.pageLimit));
//            $scope.getTotalPages($scope.resultTotalCount);
//            $scope.updatePages($scope.searchResults.length);
//            
            // Hide the loading bar now that the results have arrived
            $scope.toggleLoading(null,false);
//            
//            // Once the search results have been loaded, toggle the search form so that
//            // the search results now appear. Do not trigger if call launched not launched 
//            // from a form button event.
//            if (event != null){
//            	$scope.toggleSearchForm();
//            }
            
        }, function(response) {
            console.log("Failure -> " + response.data);
            
            // Hide the loading bar now that request has failed
            $scope.toggleLoading(null,false);
            
            $scope.searchResults = {};
            $scope.filteredSearchResults = {};
        });
	};
	
	$scope.showCVE = function(cveNum){
		if (cveNum>=0 && cveNum<$scope.totalCVEs){
			$scope.currentCVEnum = cveNum;
			$scope.currentCVEnumDisplay = cveNum + 1;
			$scope.review.jumpTo = $scope.currentCVEnumDisplay;
			$scope.currentCVE = $scope.searchResults[cveNum];
			$scope.currentCVEid = $scope.currentCVE.cveId;
			$scope.review.currentCVEdesc = $scope.currentCVE.description;
		}
		
	}
	
	$scope.nextCVE = function(){
		if ($scope.searchResults.length==0 || $scope.currentCVEnum>=$scope.searchResults.length-1)
			return;
		$scope.currentCVEnum = $scope.currentCVEnum + 1;
		$scope.selected = $scope.searchResults[$scope.currentCVEnum];
		$scope.getCVEdetails($scope.searchResults[$scope.currentCVEnum].cve_id);

	}
	
	$scope.prevCVE = function(){
		if ($scope.searchResults.length==0 || $scope.currentCVEnum==0)
			return;
		$scope.currentCVEnum = $scope.currentCVEnum - 1;
		$scope.selected = $scope.searchResults[$scope.currentCVEnum];
		$scope.getCVEdetails($scope.searchResults[$scope.currentCVEnum].cve_id);
	};
	
	$scope.goToCVE = function(){
		$scope.showCVE($scope.review.jumpTo-1);
	}	

	$scope.toggleLoading = function(className){
		
		// If not given a class name, toggle the first loading bar found
		if (className == null){
			var loadingBar = document.getElementsByClassName("nvip-loading-bar");
			
			if (loadingBar != null){
				loadingBar = loadingBar[0];
				
				if (window.getComputedStyle(loadingBar).display == "none"){
					loadingBar.style.display = 'block';
				}
				else {
					loadingBar.style.display = 'none';
				}
			}
			
			return;
		}
		
		var element = document.getElementsByClassName(className);

		if (element != null){
			var loadingBar = element[0].getElementsByClassName("nvip-loading-bar")[0];

			if (window.getComputedStyle(loadingBar).display == "none"){
				loadingBar.style.display = 'block';
			}
			else {
				loadingBar.style.display = 'none';
			}
		}
    }
	
	$scope.toggleLoading = function(className, show){
		
		var loadingBar = null;
		
		// If not given a class name, toggle the first loading bar found
		if (className == null){
			loadingBar = document.getElementsByClassName("nvip-loading-bar");
			if (loadingBar != null){
				loadingBar = loadingBar[0];
			}
		}
		else{
			var element = document.getElementsByClassName(className);
			if (element != null){
				loadingBar = element[0].getElementsByClassName("nvip-loading-bar")[0];
			}
		}
		
		if (loadingBar==null){
			return;
		}
		
		if (show==true){
			loadingBar.style.display = 'block';
		}
		else{
			loadingBar.style.display = 'none';
		}
    }
	
	/** Toggles the appearance of the Search Form and Search Results */
	$scope.toggleSearchForm = function(){	
		searchFormBtn = document.getElementsByClassName("nvip-form-btn")[0];
		
		if ($scope.showForm){
			$scope.showForm = false;
			searchFormBtn.disabled = true;
		}
		else {
			// Re-enable the Search Form submmit button if it has been disabled
			$scope.showForm = true;
			searchFormBtn.disabled = false;
		}
	}
	
	/**
	 * Toggles the display of the content block below a dropdown in the form.
	 * @param {Object} event - Triggering event object for the action. Contains 
	 * the triggering element.
	 */
	$scope.toggleContent = function(event){
		// If the triggering element is a form checkbox, do not toggle.
		if (event.srcElement.classList.contains("nvip-form-dropdown-checkbox")){
			return;
		}
		
		var formDropdown = getAncestor(event.srcElement, "nvip-form-dropdown-field");
		var formContent = getSiblingByClassName(formDropdown, "nvip-form-dropdown-content");
		var caretIcon = formDropdown.getElementsByClassName("nvip-form-dropdown-caret")[0];
		
		if(formContent.style.display == 'flex'){
			formDropdown.classList.remove('dropdown-opened');
			formContent.style.display = 'none';
        	caretIcon.classList.add("fa-angle-left");
        	caretIcon.classList.remove("fa-angle-down");
		}
		else{
			formDropdown.classList.add('dropdown-opened');
			formContent.style.display = 'flex';
			caretIcon.classList.remove("fa-angle-left");
	        caretIcon.classList.add("fa-angle-down");
		}
	}
	
	/** Initialization code **/
    $scope.init();
    
	
	
} ]);