/**
 * Copyright 2021 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package nvip_site.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import nvip_site.data.DBConnect;
import nvip_site.model.User;

public class UserDAO {
	private static String dbType = DBConnect.getDatabaseType();
	
	public static User login(String userName, String password_hash) {
		// Password Hashing Logic
		
		if(dbType == "MySQL") {
			try(Connection conn = DBConnect.getConnection()){
				
				PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(u.user_id) AS userCount, role_id, first_name FROM User u " + 
						" WHERE u.user_name = ? AND u.password_hash = ?");
				stmt.setString(1, userName);
				stmt.setString(2, password_hash);
				
				ResultSet rs = stmt.executeQuery();
				
//				CallableStatement stmt = conn.prepareCall("CALL login(?, ?, ?)");
//				stmt.setString("user_name", user.getUserName());
//				stmt.setString("password", password_hash);
//				stmt.registerOutParameter("success", Types.BOOLEAN);
		
//				stmt.execute();
				
//				boolean success = stmt.getBoolean("success");
//				conn.close();
//				
//				return success;
				
				while(rs.next()) {
					int userCount = rs.getInt("userCount");
					if (userCount == 1) {
						int roleID = rs.getInt("role_id");
						String firstName = rs.getString("first_name");
						User userInDB = new User(userName, firstName, null, roleID);
						conn.close();
						return userInDB;
					}
					else {
						conn.close();
						return null;
					}
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
		else if(dbType == "SQLite") {
			try(Connection conn = DBConnect.getConnection()){
				PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(u.user_id) AS userCount, role_id, first_name FROM User u " + 
						" WHERE u.user_name = ? AND u.password_hash = ?");
				stmt.setString(1, userName);
				stmt.setString(2, password_hash);
				
				ResultSet rs = stmt.executeQuery();
				
//				while(rs.next()) {
//					int userCount = rs.getInt("userCount");
//					if (userCount == 1) {
//						conn.close();
//						return true;
//					}
//					else {
//						conn.close();
//						return false;
//					}
//				}
				while(rs.next()) {
					int userCount = rs.getInt("userCount");
					if (userCount == 1) {
						int roleID = rs.getInt("role_id");
						String firstName = rs.getString("first_name");
						User userInDB = new User(userName, firstName, null, roleID);
						conn.close();
						return userInDB;
					}
					else {
						conn.close();
						return null;
					}
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return null;
	}
}