/**
 * Copyright 2021 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package nvip_site.dao.util;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

public class TwitterApi {
	private Logger logger = LogManager.getLogger(getClass().getSimpleName());

	/**
	 * post a tweet
	 * 
	 * @param tweet
	 */
	public void postTweet(String tweet) {
		Twitter twitter = getTwitter();
		if (twitter == null) {
			logger.error("Could not connect Twitter! Check Twitter credentials in Context.xml under Tomcat!");
			return;
		}

		// tweet should be stg like this example
		String cve = "CVE-2021-33590: GattLib 0.3-rc1 has a stack-based buffer over-read in get_device_path_from_mac in dbus/gattlib.c. For details: Cve.Live";
		try {
			twitter.updateStatus(tweet);
		} catch (TwitterException e) {
			logger.error(e.toString());
			e.printStackTrace();
		}
	}

	/**
	 * get twitter object
	 * 
	 * @return
	 */
	private Twitter getTwitter() {

		try {
			InitialContext initialContext = new InitialContext();
			Context environmentContext = (Context) initialContext.lookup("java:/comp/env");
			String consumerKey = (String) environmentContext.lookup("consumerKey");
			String consumerSecret = (String) environmentContext.lookup("consumerSecret");
			String accessToken = (String) environmentContext.lookup("accessToken");
			String accessTokenSecret = (String) environmentContext.lookup("accessTokenSecret");

			ConfigurationBuilder cb = new ConfigurationBuilder();
			cb.setDebugEnabled(true).setOAuthConsumerKey(consumerKey).setOAuthConsumerSecret(consumerSecret).setOAuthAccessToken(accessToken).setOAuthAccessTokenSecret(accessTokenSecret);
			TwitterFactory tf = new TwitterFactory(cb.build());
			return tf.getInstance();
		} catch (NamingException e) {
			logger.error(e.toString());
			e.printStackTrace();
		}

		return null;
	}

}
