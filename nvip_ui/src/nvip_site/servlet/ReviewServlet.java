package nvip_site.servlet;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import nvip_site.dao.LocalDateSerializer;
import nvip_site.dao.ReviewDAO;
import nvip_site.dao.SearchDAO;
import nvip_site.model.Vulnerability;
import nvip_site.model.VulnerabilityDetails;
import nvip_site.model.VulnerabilityForReviewList;
import nvip_site.serializer.GsonUtil;
 
@WebServlet("/reviewServlet")

public class ReviewServlet extends HttpServlet {
	
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		handleRequestGet(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		handleRequestPost(req, resp);
	}
	
	public void handleRequestPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException {
		
		GsonBuilder gsonBuilder = new GsonBuilder();
    	gsonBuilder.registerTypeAdapter(LocalDate.class, new LocalDateSerializer());
    	Gson gson = gsonBuilder.setPrettyPrinting().create();
		
    	boolean updateInfo = Boolean.parseBoolean(req.getParameter("updateInfo"));
    	
    	if(updateInfo) {
    		String vulnID = req.getParameter("vulnID");
    		String description = req.getParameter("description");
    		
    		System.out.println("VulnID: " + vulnID + " || Description: " + description);
    	}
	
	}
	
	public void handleRequestGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException {
		GsonBuilder gsonBuilder = new GsonBuilder();
    	gsonBuilder.registerTypeAdapter(LocalDate.class, new LocalDateSerializer());
    	Gson gson = gsonBuilder.setPrettyPrinting().create();
    	
//    	boolean getDetails = Boolean.parseBoolean(req.getParameter("getDetails"));
    	String cveID = req.getParameter("cveID");
    	
    	String jObj = null;
    	
    	if(cveID!=null) {
    		VulnerabilityDetails vulnDetails = ReviewDAO.getVulnerabilityDetails(cveID);
    		jObj = gson.toJson(vulnDetails);
    	}
    	else {
    		LocalDate searchDate = req.getParameter("searchDate") == null ? null : LocalDate.parse(req.getParameter("searchDate"));
    		
//        	List<Vulnerability> searchResults = ReviewDAO.getSearchResults(searchDate);
        	List<VulnerabilityForReviewList> searchResults = ReviewDAO.getSearchResults(searchDate);

    		int totalCount = searchResults.size();
    		
    		// Preferred implementation but searchResults fails to get passed for some reason
    		/*
    		map = new JsonObject();
    		map.add("searchResults", GsonUtil.toJsonArray(gson, searchResults.get(totalCount), List.class));
    		map.addProperty("totalCount", totalCount);
    		*/
    		
    		// Places the total count at the end of the array of vulnerabilities. Count is popped off the end of the array in the controller
    		JsonArray arr = GsonUtil.toJsonArray(gson, searchResults, List.class);
    		arr.add(totalCount);
    		jObj = gson.toJson(arr);
    	}
		   	    
        try {
        	resp.setContentType("text/html");
            resp.setCharacterEncoding("UTF-8");
			resp.getWriter().write(jObj);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}
}