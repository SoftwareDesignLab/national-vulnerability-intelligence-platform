import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { faAngleDown } from '@fortawesome/free-solid-svg-icons';

export interface CVSSScore {
  baseSeverity: string;
  cveId: string;
  impactConfidence: number;
  impactScore: string;
  severityConfidence: number;
}

export interface Product {
  cpe: string;
  domain: string;
  productId: number;
  version: string;
}

export interface VDO {
  cveId: string;
  vdoConfidence: number;
  vdoLabel: string;
  vdoNounGroup: string;
}

// TODO: move somewhere more global instead of stuffed in this file
export interface Vulnerability {
  cpes: Array<string>;
  cveId: string;
  cvssScoreList: Array<CVSSScore>;
  description: string;
  discoveredBy: string;
  domain: string;
  existInMitre: boolean;
  existInNvd: boolean;
  exploitPublishDate: string;
  exploitUrl: string;
  fixDate: string;
  lastModifiedDate: string;
  patch?: string;
  platform: string;
  products: Array<Product>;
  publishedDate: string;
  sources: Array<any>;
  status: string;
  timeGapMitre: number;
  timeGapNvd: number;
  type: string;
  vdoList: Array<VDO>;
  vulnId: number;
}

@Component({
  selector: 'daily-vuln-dropdown',
  templateUrl: './daily-vuln-dropdown.component.html',
  styleUrls: ['./daily-vuln-dropdown.component.css'],
})
export class DailyVulnDropdownComponent implements OnChanges {
  faAngleDown = faAngleDown;
  confidenceThreshold = 0.3;

  active: boolean = false;
  activeDescColor: string = 'black';
  inactiveDescColor: string = 'rgba(64, 64, 64, 0.7)';

  showMoreDescription: boolean = false;

  VDO_NOUN_GROUPS = {
    all: '*',
    ATTACK_THEATER: 'AttackTheater',
    CONTEXT: 'Context',
    IMPACT_METHOD: 'ImpactMethod',
    LOGICAL_IMPACT: 'LogicalImpact',
    MITIGATION: 'Mitigation',
  };
  @Input('vuln') vuln: Vulnerability;
  @Input('index') index: number;

  constructor() {
    this.vuln = {} as Vulnerability;
    this.index = 0;
  }

  ngOnChanges(changes: SimpleChanges) {
    this.vuln = changes['vuln'].currentValue;
    this.index = changes['index'].currentValue;
  }

  getVdoLabelsByNounGroup(nounGroup: string) {
    var vdoLabels: Array<string> = [];

    this.vuln.vdoList.forEach((vdo: VDO) => {
      if (vdo.vdoNounGroup == nounGroup) {
        vdoLabels.push(vdo.vdoLabel);
      }
    });

    if (vdoLabels.length == 0) return 'Unknown';

    return vdoLabels;
  }

  hasMitigation() {
    var vdoLabels = this.getVdoLabelsByNounGroup(
      this.VDO_NOUN_GROUPS.MITIGATION
    );
    if (vdoLabels == 'Unknown') return false;
    else return true;
  }

  isFixed() {
    if (this.vuln.fixDate !== "N/A") {
      return true;
    }

    return false;
  }

  isGreyDropDown(index: number) {
    return index % 2 == 1;
  }

  getVdoList(nounGroup: string) {
    var newVdoList: Array<VDO> = [];
    this.vuln.vdoList.forEach((vdo: VDO, i: number) => {
      if (vdo.vdoNounGroup == nounGroup) {
        if (vdo.vdoConfidence >= this.confidenceThreshold) {
          newVdoList.push(vdo);
        }
      }
    });
    return newVdoList;
  }

  sortBy(limitTo: number, orderBy: string, nounGroup: string): Array<VDO> {
    return this.getVdoList(nounGroup)
      .sort((a, b) =>
        a[orderBy as keyof VDO] > b[orderBy as keyof VDO]
          ? 1
          : a[orderBy as keyof VDO] == b[orderBy as keyof VDO]
          ? 0
          : -1
      )
      .slice(0, limitTo);
  }

  getLabelClass(vdo: VDO) {
    var confidence = vdo.vdoConfidence;

    if (confidence >= 0.65) {
      return 'vuln-vdo-label vdo-high-confidence';
    } else if (confidence >= 0.3) {
      return 'vuln-vdo-label vdo-med-confidence';
    } else if (confidence > -1) {
      return 'vuln-vdo-label vdo-low-confidence';
    } else {
      return 'vuln-vdo-label';
    }
  }

  getHeaderClass() {
    var c: string = this.active ? 'daily-vuln-active' : 'daily-vuln-dropdown-button';
    if (this.isGreyDropDown(this.index)) c = c + ' grey-dropdown';
    return c;
  }

  getDescription() {
    if (this.showMoreDescription) return this.vuln.description
    else return this.vuln.description.slice(0, 997) + '...'
  }

  selectDailyCve() {
    if (this.active) {
      // do inactive setting stuff
      this.active = false;
    }
    else {
      // set active and TODO: ensure all other dropdowns are inactive

      // todo this either hold state of all dropdowns rendered on page, or revert back to old angularjs code of
      // removing and adding classes based on getting names from document.
      this.active = true;
      
    }
    // var vulnButton = document.getElementsByClassName('daily-vuln-dropdown-button');
    // var vulnContent = null;
    

    // vulnButton.getElementsByClassName('description-text')[0].style.color =
    //   'rgba(64, 64, 64, 0.7)';

    // Check if the button was previously active. Will not add the active class back to it
    // if (!isActive) {
    //   // Set the called button to the active button now that all the previous ones were closed
    //   vulnContent = getSiblingByClassName(vulnButton, 'daily-vuln-content');

    //   vulnButton.getElementsByClassName('description-text')[0].style.color =
    //     'black';

    //   vulnButton.classList.add('daily-vuln-active');
    //   vulnContent.style.maxHeight = '500px';
    //   scope.displayVulnDescButton(vulnContent);
    // }
  }

  vulnDescToggle($event: any) {
    console.log("vuln des", this.vuln.description.length)
    this.showMoreDescription = !this.showMoreDescription;
    // console.log('this should show more description in dropdown', $event);
    // var button = $event.srcElement;
    // var vulnContent = $event.srcElement.getElementsByClassName('daily-vuln-content')[0] as HTMLElement;
    // var description = vulnContent.getElementsByClassName("nvip-vuln-desc")[0] as HTMLElement;

    // if(description.style.maxHeight != 'calc(100%)'){
    //   description.style.maxHeight = 'calc(100%)';
    //   description.style.overflow = 'visible';
    //   button.innerText = "Show Less";
    // }
    // else {
    //   description.style.maxHeight = getComputedStyle(document.documentElement).getPropertyValue('--max-vuln-desc-height-em');
    //   description.style.overflow = 'hidden';
    //   button.innerText = "Show More";
    // }
  }
}
