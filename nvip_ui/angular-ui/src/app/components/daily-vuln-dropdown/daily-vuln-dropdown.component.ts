import { Component, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';
import { faAngleDown } from '@fortawesome/free-solid-svg-icons';
import { Vulnerability, VDO } from 'src/app/models/vulnerability.model';
@Component({
  selector: 'daily-vuln-dropdown',
  templateUrl: './daily-vuln-dropdown.component.html',
  styleUrls: ['./daily-vuln-dropdown.component.css'],
})
export class DailyVulnDropdownComponent implements OnChanges {
  faAngleDown = faAngleDown;
  confidenceThreshold = 0.3;

  active: boolean = false;
  activeDescColor: string = 'black';
  inactiveDescColor: string = 'rgba(64, 64, 64, 0.7)';

  showMoreDescription: boolean = false;

  VDO_NOUN_GROUPS = {
    all: '*',
    ATTACK_THEATER: 'AttackTheater',
    CONTEXT: 'Context',
    IMPACT_METHOD: 'ImpactMethod',
    LOGICAL_IMPACT: 'LogicalImpact',
    MITIGATION: 'Mitigation',
  };
  @Input('vuln') vuln: Vulnerability;
  @Input('index') index: number;
  @Input('currentToggle') currentToggle: number;
  @Output() selected = new EventEmitter<{index: number}>

  constructor() {
    this.vuln = {} as Vulnerability;
    this.index = 0;
    this.currentToggle = -1;
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['vuln']) this.vuln = changes['vuln'].currentValue;
    if (changes['index']) this.index = changes['index']?.currentValue;
    if (this.index !== changes['currentToggle'].currentValue) this.active = false;
  }

  getVdoLabelsByNounGroup(nounGroup: string) {
    var vdoLabels: Array<string> = [];

    this.vuln.vdoList.forEach((vdo: VDO) => {
      if (vdo.vdoNounGroup == nounGroup) {
        vdoLabels.push(vdo.vdoLabel);
      }
    });

    if (vdoLabels.length == 0) return 'Unknown';

    return vdoLabels;
  }

  hasMitigation() {
    var vdoLabels = this.getVdoLabelsByNounGroup(
      this.VDO_NOUN_GROUPS.MITIGATION
    );
    if (vdoLabels == 'Unknown') return false;
    else return true;
  }

  isFixed() {
    if (this.vuln.fixDate !== "N/A") {
      return true;
    }

    return false;
  }

  isGreyDropDown(index: number) {
    return index % 2 == 1;
  }

  getVdoList(nounGroup: string) {
    var newVdoList: Array<VDO> = [];
    this.vuln.vdoList.forEach((vdo: VDO, i: number) => {
      if (vdo.vdoNounGroup == nounGroup) {
        if (vdo.vdoConfidence >= this.confidenceThreshold) {
          newVdoList.push(vdo);
        }
      }
    });
    return newVdoList;
  }

  sortBy(limitTo: number, orderBy: string, nounGroup: string): Array<VDO> {
    return this.getVdoList(nounGroup)
      .sort((a, b) =>
        a[orderBy as keyof VDO] > b[orderBy as keyof VDO]
          ? 1
          : a[orderBy as keyof VDO] == b[orderBy as keyof VDO]
          ? 0
          : -1
      )
      .slice(0, limitTo);
  }

  getLabelClass(vdo: VDO) {
    var confidence = vdo.vdoConfidence;

    if (confidence >= 0.65) {
      return 'vuln-vdo-label vdo-high-confidence';
    } else if (confidence >= 0.3) {
      return 'vuln-vdo-label vdo-med-confidence';
    } else if (confidence > -1) {
      return 'vuln-vdo-label vdo-low-confidence';
    } else {
      return 'vuln-vdo-label';
    }
  }

  getHeaderClass() {
    var c: string = this.active ? 'daily-vuln-active' : 'daily-vuln-dropdown-button';
    if (this.isGreyDropDown(this.index)) c = c + ' grey-dropdown';
    return c;
  }

  getDescription() {
    if (this.showMoreDescription) return this.vuln.description
    else return this.vuln.description.slice(0, 997) + '...'
  }

  selectDailyCve() {
    if (this.active) {
      // do inactive setting stuff
      this.active = false;
    }
    else {
      this.active = true;
      this.selected.emit({ index: this.index });
    }
  }

  vulnDescToggle($event: any) {
    this.showMoreDescription = !this.showMoreDescription;
  }
}
