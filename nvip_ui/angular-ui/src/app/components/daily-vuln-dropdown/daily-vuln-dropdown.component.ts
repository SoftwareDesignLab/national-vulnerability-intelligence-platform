import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { faAngleDown } from '@fortawesome/free-solid-svg-icons';

export interface CVSSScore {
  baseSeverity: string;
  cveId: string;
  impactConfidence: number;
  impactScore: string;
  severityConfidence: number;
}

export interface Product {
  cpe: string;
  domain: string;
  productId: number;
  version: string;
}

export interface VDO {
  cveId: string;
  vdoConfidence: number;
  vdoLabel: string;
  vdoNounGroup: string;
}

// TODO move somewhere more global instead of stuffed in this file
export interface Vulnerability {
  cpes: Array<string>;
  cveId: string;
  cvssScoreList: Array<CVSSScore>;
  description: string;
  discoveredBy: string;
  domain: string;
  existInMitre: boolean;
  existInNvd: boolean;
  exploitPublishDate: string;
  exploitUrl: string;
  fixDate: string;
  lastModifiedDate: string;
  patch: string;
  platform: string;
  products: Array<Product>;
  publishedDate: string;
  sources: Array<any>;
  status: string;
  timeGapMitre: number;
  timeGapNvd: number;
  type: string;
  vdoList: Array<VDO>;
  vulnId: number;
}

@Component({
  selector: 'daily-vuln-dropdown',
  templateUrl: './daily-vuln-dropdown.component.html',
  styleUrls: ['./daily-vuln-dropdown.component.css'],
})
export class DailyVulnDropdownComponent implements OnChanges {
  faAngleDown = faAngleDown;
  confidenceThreshold = 0.3;
  VDO_NOUN_GROUPS = {
    all: '*',
    ATTACK_THEATER: 'AttackTheater',
    CONTEXT: 'Context',
    IMPACT_METHOD: 'ImpactMethod',
    LOGICAL_IMPACT: 'LogicalImpact',
    MITIGATION: 'Mitigation',
  };
  @Input('vuln') vuln: Vulnerability;
  @Input('index') index: number;

  constructor() {
    this.vuln = {} as Vulnerability;
    this.index = 0;
  }

  ngOnChanges(changes: SimpleChanges) {
    this.vuln = changes['vuln'].currentValue;
    this.index = changes['index'].currentValue;
  }

  //todo
  hasMitigation() {
    return true;
  }

  //todo
  isFixed() {
    return true;
  }

  isGreyDropDown(index: number) {
    return index % 2 == 1;
  }

  getVdoList(nounGroup: string) {
    var newVdoList: Array<VDO> = [];
    this.vuln.vdoList.forEach((vdo: VDO, i: number) => {
      if (vdo.vdoNounGroup == nounGroup) {
        if (vdo.vdoConfidence >= this.confidenceThreshold) {
          newVdoList.push(vdo);
        }
      }
    });
    return newVdoList;
  }

  sortBy(limitTo: number, orderBy: string, nounGroup: string): Array<VDO> {
    return this.getVdoList(nounGroup)
      .sort((a, b) =>
        a[orderBy as keyof VDO] > b[orderBy as keyof VDO]
          ? 1
          : a[orderBy as keyof VDO] == b[orderBy as keyof VDO]
          ? 0
          : -1
      )
      .slice(0, limitTo);
  }

  getLabelClass(vdo: VDO) {
    var confidence = vdo.vdoConfidence;

    if (confidence >= 0.65) {
      return 'vuln-vdo-label vdo-high-confidence';
    } else if (confidence >= 0.3) {
      return 'vuln-vdo-label vdo-med-confidence';
    } else if (confidence > -1) {
      return 'vuln-vdo-label vdo-low-confidence';
    } else {
      return 'vuln-vdo-label';
    }
  }

  selectDailyCve() {
    console.log("this should open vuln dropdown")
    // // Call for the ancestor since it doesn't sometimes calls the button's children
    // var vulnButton = getAncestor(
    //   event.srcElement,
    //   'daily-vuln-dropdown-button'
    // );
    // var vulnContent = null;
    // var activeButtons = document.getElementsByClassName('daily-vuln-active');
    // var isActive = vulnButton.classList.contains('daily-vuln-active');

    // // Remove all the styling from the existing active buttons
    // angular.forEach(activeButtons, function (activeButton, i) {
    //   vulnContent = getSiblingByClassName(activeButton, 'daily-vuln-content');
    //   activeButton.classList.remove('daily-vuln-active');
    //   vulnContent.style.maxHeight = 0;
    //   activeButton.getElementsByClassName('description-text')[0].style.color =
    //     'rgba(64, 64, 64, 0.7)';
    // });

    // vulnButton.getElementsByClassName('description-text')[0].style.color =
    //   'rgba(64, 64, 64, 0.7)';

    // // Check if the button was previously active. Will not add the active class back to it
    // if (!isActive) {
    //   // Set the called button to the active button now that all the previous ones were closed
    //   vulnContent = getSiblingByClassName(vulnButton, 'daily-vuln-content');

    //   vulnButton.getElementsByClassName('description-text')[0].style.color =
    //     'black';

    //   vulnButton.classList.add('daily-vuln-active');
    //   vulnContent.style.maxHeight = '500px';
    //   scope.displayVulnDescButton(vulnContent);
    // }
  };

  vulnDescToggle() {
    console.log("this should show more description in dropdown")
    // var button = ele.srcElement;
    // var vulnContent = getAncestor(ele.target, "daily-vuln-content");
    // var description = vulnContent.getElementsByClassName("nvip-vuln-desc")[0];
    
    // if(description.style.maxHeight != 'calc(100%)'){
    //   description.style.maxHeight = 'calc(100%)';
    //   description.style.overflow = 'visible';
    //   button.innerText = "Show Less";
    // }
    // else {
    //   description.style.maxHeight = getComputedStyle(document.documentElement).getPropertyValue('--max-vuln-desc-height-em');
    //   description.style.overflow = 'hidden';
    //   button.innerText = "Show More";
    // }
  }
}
