import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { faAngleLeft, faAngleDown } from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'search-dropdown',
  templateUrl: './search-dropdown.component.html',
  styleUrls: ['./search-dropdown.component.css']
})
export class SearchDropdownComponent {
  faAngleLeft = faAngleLeft;
  faAngleDown = faAngleDown;

  // for dropped down component, rotate our arrow icon downward (-90 degrees)
  rotationAmount = 0;

  @Input('label') label: string;
  @Input('entityLabels') entityLabels: Array<string>;

  constructor() {
    this.label = "";
    this.entityLabels = [];
  }

  ngOnChanges(changes: SimpleChanges) {
    this.label = changes['label'].currentValue;
    this.entityLabels = changes['entityLabels'].currentValue;
  }


  getAncestor(element: HTMLElement, className: string) {
	
    if (element == null) {
      return null;
    }
    
    // If the given element has the desired class, return it instead of looking for
    // an earlier class
    if(element.classList.contains(className)){
      return element;
    }
    
    var parent = element.parentElement; 
    
    while(parent != null){
      if (parent.classList.contains(className)) {
        return parent;
      }
      parent = parent.parentElement;
    }
    
    return null;
  }
  
  getSiblingByClassName(element: HTMLElement, className: string) {
    if (element == null){
      return null;
    }
    
    var sibling = element.nextSibling as HTMLElement;
    
    while(sibling){
      if(sibling.nodeType === 1 && sibling != element){
        if (sibling.classList.contains(className)){
          return sibling;
        }
      }
      
      sibling = sibling.nextSibling as HTMLElement;
    }
    
    return null;
  }

  //TODO: can probably make this more intuitive - current copy from old UI
  toggleContent($event: any) {
    console.log("EVENT", $event);
    // If the triggering element is a form checkbox, do not toggle.
		if ($event.srcElement.classList.contains("nvip-form-dropdown-checkbox")){
			return;
		}
		
		var formDropdown = this.getAncestor($event.srcElement as HTMLElement, "nvip-form-dropdown-field");
    console.log("form drop", formDropdown)
		var formContent = this.getSiblingByClassName(formDropdown as HTMLElement, "nvip-form-dropdown-content");
		console.log("form con", formContent)
    var caretIcon = formDropdown!.getElementsByClassName("nvip-form-dropdown-caret")[0];
		
		if(formContent!.style.display == 'flex'){
      this.rotationAmount = 0;
			formDropdown!.classList.remove('dropdown-opened');
			formContent!.style.display = 'none';
      caretIcon.classList.add("fa-angle-left");
      caretIcon.classList.remove("fa-angle-down");
		}
		else{
      this.rotationAmount = -90;
			formDropdown!.classList.add('dropdown-opened');
			formContent!.style.display = 'flex';
			caretIcon.classList.remove("fa-angle-left");
	    caretIcon.classList.add("fa-angle-down");
		}
  }
}
