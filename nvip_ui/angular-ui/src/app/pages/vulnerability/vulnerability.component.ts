import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import {
  faSpinner,
  faAngleDoubleLeft,
  faAngleDoubleRight,
  faAngleLeft,
  faAngleRight,
} from '@fortawesome/free-solid-svg-icons';
import { VulnService } from 'src/app/services/vuln/vuln.service';
import { Vulnerability } from 'src/app/components/daily-vuln-dropdown/daily-vuln-dropdown.component';
import { CookieService } from 'src/app/services/Cookie/cookie.service';
import { Session } from 'src/app/services/Auth/auth-service.service';

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.css'],
})
export class VulnerabilityComponent {
  faSpinner = faSpinner;
  faAngleDoubleLeft = faAngleDoubleLeft;
  faAngleDoubleRight = faAngleDoubleRight;
  faAngleRight = faAngleRight;
  faAngleLeft = faAngleLeft;
  vuln = {} as Vulnerability;

  //TODO: CVSSSCore graph, VDO labels graph

  constructor(private vulnService: VulnService, private route: ActivatedRoute, private cookieService: CookieService) {
    this.route.params.subscribe((params) => this.init(params['id']));
  }

  init(id: string) {
    var session: Session = this.cookieService.get('nvip_user');
    this.vulnService.getByID(id, session.userName, session.token).subscribe((res: any) => {
      console.log('vuln res', res);
      this.vuln = res;
    });
  }

  // perhaps in future this can be simplified to @angular/material Tab component
  openTab(tabClass: string) {
    var x = document.getElementsByClassName(
      'vuln-tab'
    ) as HTMLCollectionOf<HTMLElement>;
    var tabButtons = document.getElementsByClassName(
      'vuln-tab-button'
    ) as HTMLCollectionOf<HTMLElement>;
    for (let i = 0; i < x.length; i++) {
      if (x[i].classList.contains(tabClass)) {
        x[i].style.display = 'block';
        tabButtons[i].style.backgroundColor = '#ffffff';
      } else {
        x[i].style.display = 'none';
        tabButtons[i].style.backgroundColor = '#f0f0f0';
      }
    }
  }
}
