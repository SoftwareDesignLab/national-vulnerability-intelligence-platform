import { Component, OnInit } from '@angular/core';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';
import { VulnService } from 'src/app/services/vuln/vuln.service';

export interface VulnMap {
  date: string;
  cve_list: Array<any>;
}

export interface VulnMaps extends Array<VulnMap> {}

@Component({
  selector: 'nvip-recent',
  templateUrl: './recent.component.html',
  styleUrls: ['./recent.component.css'],
})
export class RecentComponent implements OnInit {
  faSpinner = faSpinner;
  dailyVulnLimit: Array<number> = [];
  vulnLimitIncr: number = 5;
  dailyVulnIndex: number = 0;
  dailyVulns: VulnMaps = [];
  currentSelected: number = -1;

  constructor(private vulnService: VulnService) {}

  ngOnInit() {
    this.vulnService.onRecentInit().subscribe((res: any) =>
      Object.keys(res).forEach((key) => {
        this.dailyVulns.push({
          date: this.formatDate(res[key].date),
          cve_list: res[key].list,
        });
        this.dailyVulnLimit.push(this.vulnLimitIncr);
      })
    );
  }

  formatDate(dateString: string) {
    var timeZone = 'T00:00:00.000-08:00';
    var date = new Date(dateString + timeZone);

    return date.toDateString();
  }

  isDisabled(isMore: boolean, panelIndex: number, vulnMap: VulnMap) {
    if (isMore)
      return this.dailyVulnLimit[panelIndex] >= vulnMap.cve_list.length;
    else return this.dailyVulnLimit[panelIndex] <= this.vulnLimitIncr;
  }

  incrementDailyVulnDay(incr: number) {
    if (this.dailyVulnIndex + incr < 0) {
      return;
    } else if (this.dailyVulnIndex + incr >= this.dailyVulns.length) {
      return;
    }

    this.dailyVulnIndex = this.dailyVulnIndex += incr;
  }

  showMore(panelIndex: number) {
    this.dailyVulnLimit[panelIndex] =
      this.dailyVulnLimit[panelIndex] + this.vulnLimitIncr;
  }

  showLess(panelIndex: number) {
    var newLimit: number = this.dailyVulnLimit[panelIndex] - this.vulnLimitIncr;

    if (newLimit < this.vulnLimitIncr) {
      this.dailyVulnLimit[panelIndex] = this.vulnLimitIncr;
    } else {
      this.dailyVulnLimit[panelIndex] = newLimit;
    }
  }

  setCurrentSelected(event: any) {
    this.currentSelected = event['index'];
  }
}
