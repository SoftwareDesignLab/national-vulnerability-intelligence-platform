import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import {
  faSpinner,
  faAngleDoubleLeft,
  faAngleDoubleRight,
  faAngleLeft,
  faAngleRight,
} from '@fortawesome/free-solid-svg-icons';
import { ApiService } from 'src/app/services/Api/api-service.service';
import { Session } from 'src/app/services/Auth/auth-service.service';
import { CookieService } from 'src/app/services/Cookie/cookie.service';
import { VulnService } from 'src/app/services/vuln/vuln.service';
import searchresults from '../search/searchresults.json';

export interface SearchCriteria {
  keyword: string;
  cve_id: string;
  limit: number;
  startDate: string;
  endDate: string;
  product: string;
}

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css'],
})
export class SearchComponent implements OnInit {
  faSpinner = faSpinner;
  faAngleDoubleLeft = faAngleDoubleLeft;
  faAngleDoubleRight = faAngleDoubleRight;
  faAngleRight = faAngleRight;
  faAngleLeft = faAngleLeft;

  rotationAmountVDO = 0;
  rotationAmountCVSS = 0;
  search = {} as SearchCriteria;
  session = {} as Session;
  showForm: boolean = true;
  searchResults: Array<any> = [];
  filteredSearchResults: Array<any> = [];
  cvssScores = [];
  resultTotalCount = 0;
  pageRecord: Array<number> = [];
  currentPage = 0;
  pageBlocks: Array<number> = [];
  totalPages = 0;
  totalPageLimit = 0;
  pageLimit = 10;
  pageOffset = 0;
  loading = false;
  vdoNounGroups = {} as Record<string, Array<any>>;
  vdoNounGroupLabels = [] as Array<any>;
  vdoEntityLabels = {} as Record<string, Array<any>>;

  constructor(
    private vulnService: VulnService,
    private cookieService: CookieService,
    private apiService: ApiService
  ) {}

  ngOnInit(): void {
    this.session = this.cookieService.get('nvip_user');
    this.vulnService
      .searchInfo(this.session.userName, this.session.token)
      .subscribe((res: any) => {
        this.cvssScores = res.cvssScores.cvssScores;
        this.vdoNounGroups = res.vdoNounGroups;
        (
          Object.keys(this.vdoNounGroups) as (keyof typeof this.vdoNounGroups)[]
        ).forEach((key, index) => {
          this.vdoNounGroupLabels.push(key);
          this.vdoEntityLabels[key] = this.vdoNounGroups[key].sort();
        });
      });
  }

  toggleSearchForm() {
    var searchFormBtn = document.getElementsByClassName("nvip-form-btn")[0] as HTMLInputElement;
		if (this.showForm){
			this.showForm = false;
			searchFormBtn.disabled = true;
		}
		else {
			// Re-enable the Search Form submmit button if it has been disabled
			this.showForm = true;
			searchFormBtn.disabled = false;
		}
  }

  getAncestor(element: HTMLElement, className: string) {
    if (element == null) {
      return null;
    }

    // If the given element has the desired class, return it instead of looking for
    // an earlier class
    if (element.classList.contains(className)) {
      return element;
    }

    var parent = element.parentElement;

    while (parent != null) {
      if (parent.classList.contains(className)) {
        return parent;
      }
      parent = parent.parentElement;
    }

    return null;
  }

  getSiblingByClassName(element: HTMLElement, className: string) {
    if (element == null) {
      return null;
    }

    var sibling = element.nextSibling as HTMLElement;

    while (sibling) {
      if (sibling.nodeType === 1 && sibling != element) {
        if (sibling.classList.contains(className)) {
          return sibling;
        }
      }

      sibling = sibling.nextSibling as HTMLElement;
    }

    return null;
  }

  //TODO: can probably make this more intuitive - current copy from old UI
  toggleContent($event: any, drop: string) {
    console.log('EVENT', $event);
    // If the triggering element is a form checkbox, do not toggle.
    if ($event.srcElement.classList.contains('nvip-form-dropdown-checkbox')) {
      return;
    }

    var formDropdown = this.getAncestor(
      $event.srcElement as HTMLElement,
      'nvip-form-dropdown-field'
    );
    var formContent = this.getSiblingByClassName(
      formDropdown as HTMLElement,
      'nvip-form-dropdown-content'
    );
    var caretIcon = formDropdown!.getElementsByClassName(
      'nvip-form-dropdown-caret'
    )[0];

    if (formContent!.style.display == 'flex') {
      if (drop === 'VDO') this.rotationAmountVDO = 0;
      else if (drop === 'CVSS') this.rotationAmountCVSS = 0;
      formDropdown!.classList.remove('dropdown-opened');
      formContent!.style.display = 'none';
      caretIcon.classList.add('fa-angle-left');
      caretIcon.classList.remove('fa-angle-down');
    } else {
      if (drop === 'VDO') this.rotationAmountVDO = -90;
      else if (drop === 'CVSS') this.rotationAmountCVSS = -90;
      formDropdown!.classList.add('dropdown-opened');
      formContent!.style.display = 'flex';
      caretIcon.classList.remove('fa-angle-left');
      caretIcon.classList.add('fa-angle-down');
    }
  }

  searchVulns($event: any, f: NgForm) {
    // Retrieve the search form button and disable it
    var searchFormBtn = document.getElementsByClassName('nvip-form-btn')[0] as HTMLInputElement;
    // Prevent multiple calls to the database if the button is currently
    // disabled (i.e. waiting for a query to complete)
    if (searchFormBtn!.disabled !== true) {
      document.getElementById('searchKeyWordError')!.style.display = 'none';
      document.getElementById('searchLimitError')!.style.display = 'none';
      var username = this.session.userName;
      var token = this.session.token;

      if (username == null || username == '' || token == null || token == '') {
        alert('You are not logged in!');
        this.cookieService.remove('nvip_user');
        window.location.reload();
      }

      if (
        (this.search.keyword === undefined || this.search.keyword.length < 2) &&
        this.search.cve_id === undefined
      ) {
        document.getElementById('searchKeyWordError')!.style.display = 'block';
        return;
      }

      if (
        !Number.isInteger(this.search.limit) &&
        this.search.limit !== null &&
        this.search.limit !== undefined
      ) {
        console.log(this.search.limit);
        document.getElementById('searchLimitError')!.style.display = 'block';
        document.getElementById('searchLimitError')!.innerText =
          'Please enter an integer for the limit';
        return;
      } else if (Math.abs(this.search.limit) > 100) {
        document.getElementById('searchLimitError')!.style.display = 'block';
        document.getElementById('searchLimitError')!.innerText =
          'Please enter a limit less than or equal to 100';
        return;
      } else if (
        this.search.limit === undefined ||
        this.search.limit === null
      ) {
        this.search.limit = 100;
      }

      searchFormBtn.disabled = true;

      // Display the loading bar
      this.toggleLoading();

      this.formatSearchParameters();

      this.searchResults = [];
      this.filteredSearchResults = [];

      this.apiService
        .cveSearch({
          username: username,
          token: token,
          // vulnId : this.search.cve_id,
          keyword: this.search.keyword,
          cve_id: this.search.cve_id,
          //TODO: add child checkboxes to search criteria
          // cvssScores: this.search.cvssScores,
          startDate: this.search.startDate,
          endDate: this.search.endDate,
          // inSite: this.search.sites,
          // vdoLabels: this.search.vdoLabels,
          limitCount: Math.abs(this.search.limit),
          // isBefore: isBefore,
          product: this.search.product,
        })
        .subscribe({
          next: (res) => {
            // TODO: all below logic should go here
          },
          error: (e) => {
            //   }, function(response) {
            //       // Hide the loading bar now that request has failed
            //       $scope.toggleLoading();

            //       $scope.searchResults = {};
            //       $scope.filteredSearchResults = {};

            //       if (response.status == 401){
            //         alert(response.data);
            //         window.location.assign(window.location.href+"login");

            //       }
            //   });
          },
          complete: () => {},
        });

      this.resultTotalCount = searchresults.pop() as number;

      if (this.resultTotalCount < 10) {
        this.totalPageLimit = 1;
      } else {
        this.totalPageLimit = Math.ceil(this.resultTotalCount / 10) - 1;
      }

      this.currentPage = 0;
      this.searchResults = searchresults; //TODO: make this res data

      this.filteredSearchResults = this.searchResults.slice(0, this.pageLimit);
      this.getTotalPages();
      this.updatePages(this.searchResults.length);

      // Hide the loading bar now that the results have arrived
      this.toggleLoading();

      // Once the search results have been loaded, toggle the search form so that
      // the search results now appear. Do not trigger if call launched not launched
      // from a form button event.
      if ($event !== null){
        this.toggleSearchForm();
      }
      searchFormBtn.disabled = false;
    }
  }

  getTotalPages() {
    var totalPages = (this.resultTotalCount % this.pageLimit) == 0 ? (this.resultTotalCount / this.pageLimit) :
			Math.floor(this.resultTotalCount / this.pageLimit) + 1;
			
		// Set the total number of pages
		this.totalPages = totalPages;
  }

  updatePages(totalEntries: number) {
    // If there are no entries, skip this method
		if (totalEntries == 0) {
			this.pageBlocks = [];
      this.pageRecord = [0, 0];
			return;
		}
		
		var numPages = this.totalPageLimit <= 1 ? 0 : Math.floor(this.totalPageLimit/2) - 1;
		var start = this.currentPage - numPages < 0 ? 0 : this.currentPage - numPages;
		var end =  this.currentPage + numPages > this.totalPages ? this.totalPages : ((this.currentPage + numPages) + 1);
			
		// If the ending page is before the total allowed number of pages, set it to the 
		// total number of pages allowed
		if (end < this.totalPageLimit)
			end = this.totalPageLimit;
		
		var pageBlocks = [];
		for (let i = 0; i < this.totalPageLimit+1 && i < 10; i++) {
			pageBlocks.push(i);
		}
		
		// Calculate the record range based on the current page and the total 
		// number of entries
		this.pageRecord = [(((this.currentPage) * this.pageLimit) + 1), 
      ((this.currentPage + 1) * this.pageLimit) > totalEntries 
      ? totalEntries : ((this.currentPage + 1) * this.pageLimit)];
			
		this.pageBlocks = pageBlocks;
  }

  toggleLoading() {
    this.loading = !this.loading;
  }

  formatSearchParameters() {}

  firstPage() {
    this.changePage(0);
  }

  previousPage() {
    if (this.currentPage - 1 >= 0) {
			this.changePage(this.currentPage - 1);
		}
  }

  changePage(pageNum: number) {
    // If the page number is not the current page, switch pages
    if(this.currentPage != pageNum){
      var oldOffset = this.pageOffset;
      this.pageOffset = (this.pageLimit * pageNum); 
      this.currentPage = pageNum;
      var limitCount = this.pageLimit * Math.abs(this.currentPage - pageNum);
      
      // If the offset index is beyond the available indicies in the current search
      // result, pull from the database
      if(this.pageOffset >= this.searchResults.length){
        // console.log("Hits this");
        // $scope.searchVulns(limitCount, ascending);
      }
      else{
        // Modify the filtered results to show the desired values
        this.filteredSearchResults = this.searchResults.slice(this.pageOffset, (this.pageOffset + this.pageLimit));
      }
      
      this.updatePages(this.searchResults.length);
    }
  }

  nextPage() {
    if (this.currentPage + 1 < this.totalPages) {
			this.changePage(this.currentPage + 1);
		}
  }

  lastPage() {
    this.changePage(this.totalPages - 1);
  }
}
