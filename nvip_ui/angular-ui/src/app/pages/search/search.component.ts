import { Component, OnInit } from '@angular/core';
import { faSpinner, faAngleDoubleLeft, faAngleDoubleRight, faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';
import { Session } from 'src/app/services/Auth/auth-service.service';
import { CookieService } from 'src/app/services/Cookie/cookie.service';
import { VulnService } from 'src/app/services/vuln/vuln.service';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent implements OnInit {
  faSpinner = faSpinner;
  faAngleDoubleLeft = faAngleDoubleLeft;
  faAngleDoubleRight = faAngleDoubleRight;
  faAngleRight = faAngleRight;
  faAngleLeft = faAngleLeft;

  //TODO:
  showForm: boolean = true;
  searchResults: Array<any> = [];
  cvssScores = [];
  resultTotalCount = 0;
  pageRecord = [];
  currentPage = 0;
  pageBlocks = [];
  totalPages = 0;
  vdoNounGroups = {} as Record<string, Array<any>>;
  vdoNounGroupLabels = [] as Array<any>;
  vdoEntityLabels = {} as Record<string, Array<any>>;

  constructor(private vulnService: VulnService, private cookieService: CookieService) { }

  ngOnInit(): void {
      var session: Session = this.cookieService.get('nvip_user');
      this.vulnService.searchInfo(session.userName, session.token).subscribe((res: any) => {
        this.cvssScores = res.cvssScores.cvssScores;
        this.vdoNounGroups = res.vdoNounGroups;
        (Object.keys(this.vdoNounGroups) as (keyof typeof this.vdoNounGroups)[]).forEach((key, index) => {
          this.vdoNounGroupLabels.push(key);
          this.vdoEntityLabels[key] = this.vdoNounGroups[key].sort();
        });
      })
  }


  toggleSearchForm() {

    console.log("search form toggle press");
  }

  getAncestor(element: HTMLElement, className: string) {
	
    if (element == null) {
      return null;
    }
    
    // If the given element has the desired class, return it instead of looking for
    // an earlier class
    if(element.classList.contains(className)){
      return element;
    }
    
    var parent = element.parentElement; 
    
    while(parent != null){
      if (parent.classList.contains(className)) {
        return parent;
      }
      parent = parent.parentElement;
    }
    
    return null;
  }
  
  getSiblingByClassName(element: HTMLElement, className: string) {
    if (element == null){
      return null;
    }
    
    var sibling = element.nextSibling as HTMLElement;
    
    while(sibling){
      if(sibling.nodeType === 1 && sibling != element){
        if (sibling.classList.contains(className)){
          return sibling;
        }
      }
      
      sibling = sibling.nextSibling as HTMLElement;
    }
    
    return null;
  }

  //TODO: can probably make this more intuitive - current copy from old UI
  toggleContent($event: any) {
    console.log("EVENT", $event);
    // If the triggering element is a form checkbox, do not toggle.
		if ($event.srcElement.classList.contains("nvip-form-dropdown-checkbox")){
			return;
		}
		
		var formDropdown = this.getAncestor($event.srcElement as HTMLElement, "nvip-form-dropdown-field");
		var formContent = this.getSiblingByClassName(formDropdown as HTMLElement, "nvip-form-dropdown-content");
		var caretIcon = formDropdown!.getElementsByClassName("nvip-form-dropdown-caret")[0];
		
		if(formContent!.style.display == 'flex'){
			formDropdown!.classList.remove('dropdown-opened');
			formContent!.style.display = 'none';
      caretIcon.classList.add("fa-angle-left");
      caretIcon.classList.remove("fa-angle-down");
		}
		else{
      console.log("CARET ICON", caretIcon.classList);
			formDropdown!.classList.add('dropdown-opened');
			formContent!.style.display = 'flex';
			caretIcon.classList.remove("fa-angle-left");
	    caretIcon.classList.add("fa-angle-down");
		}
  }

  searchVulns() {
    console.log("this should trigger vuln search");
  }

  firstPage() {
    console.log("this should go to first result page");
  }

  previousPage() {
    console.log("should go to prev page");
  }

  changePage(pageIndex: number) {
    console.log("this should go to page", pageIndex);
  }

  nextPage() {

  }

  lastPage() {

  }
}
