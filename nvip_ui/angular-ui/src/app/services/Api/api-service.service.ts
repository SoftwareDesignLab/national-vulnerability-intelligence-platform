import { Injectable } from '@angular/core';
import { HttpClient, HttpContext, HttpHeaders, HttpParams, HttpResponse } from "@angular/common/http";
import { Observer } from 'rxjs';
import { AuthCredentials } from '../Auth/auth-service.service';
import { Routes } from './api_routes';

/* Related Interfaces */

export interface HttpRequest {
  url: string;
  options: HttpRequestOptions;
}

export interface HttpRequestOptions {
  method: string;
  headers?: HttpHeaders | { [header: string]: string | string[]; } | undefined; 
  context?: HttpContext | undefined;
  params?: HttpRequestParams;
  reportProgress?: boolean;
  withCredentials?: boolean;
}

export type HttpRequestParams = 
  HttpParams | { [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>; }

export type ApiRequestObserver = Partial<Observer<Object>> | ((value: Object) => void);

// This needs to move to where ever api.cveDetails is called from
export interface CVEDetailsRequest {
 cveId: string; // TODO: figure out the actual type of this
 username: string;
 token: string;
}

// This also needs to be moved to a better place
export interface CVESearchRequest {
  username: string;
  token: string;
  searchDate: string; // TODO: find real type
  crawled: boolean;
  rejected: boolean;
  accepted: boolean;
  reviewed: boolean;
}

// Needs better home
export interface CVEUpdateRequest {
  atomicUpdate: boolean;
  username: string;
  token: string;
  statusID: string; // TODO: find real type
  vulnID: string; // TODO: find real type
  info: string; // TODO: find real type
  tweet: boolean; 
}

@Injectable({
  providedIn: 'root'
})
export class ApiService{
  private GET_OPTIONS: HttpRequestOptions = {
    method: "GET",
  }


  constructor(private httpClient: HttpClient) { 

  }

  login(credentials: AuthCredentials, callback: ApiRequestObserver) {
    const request = this.httpClient.get(Routes.login, this.injectGetParameters({...credentials}))
    request.subscribe(callback)
  }

  createAccount(credentials: AuthCredentials, callback: ApiRequestObserver) {
    const body = JSON.stringify(credentials)
    this.httpClient.post(Routes.login, body, {
      headers: {
        'Content-Type': "application/json"
      },
      params: {
        createUser: true
      }
    }).subscribe(callback)
  }

  countGraphs(callback: ApiRequestObserver) {
    this.httpClient.get(Routes.main, this.injectGetParameters({countGraphs: "all"})).subscribe(callback)
  }

  cveDetails(detailRequst: CVEDetailsRequest, callback: ApiRequestObserver) {
    this.httpClient.get(Routes.review, this.injectGetParameters({...detailRequst})).subscribe(callback)
  }

  cveSearch(searchRequest: CVESearchRequest, callback: ApiRequestObserver) {
    this.httpClient.get(Routes.review, this.injectGetParameters({...searchRequest})).subscribe(callback)
  }

  cveUpdateAtomic(updateRequest: CVEUpdateRequest, cveDescription: string, callback: ApiRequestObserver) {
    this.httpClient.post(Routes.review, cveDescription, {
      headers: {
        'Content-Type': "Text/plain"
      },
      params: {
        ...updateRequest
      }
    })
  }

  cveUpdateComplex(updateRequest: CVEUpdateRequest) {
    
  }



  //maybe move this somewhere else eventually?
  vulnServlet(daily: boolean, dateRange: number) {
    return this.httpClient.get(Routes.vulnerability, this.injectGetParameters({daily: daily, dateRange: dateRange}))
    // request.subscribe(callback)
  }


  private injectGetParameters(params: HttpRequestParams) {
    return {...this.GET_OPTIONS, params: params}
  }
}

