import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { ApiService } from '../Api/api-service.service';
import { testData } from './test-data';

export interface SingleDatum {
  name?: string;
  value: number;
}

export interface TimeDatum extends SingleDatum {
  dateTime: Date;
}

export enum ChartType {
  AddedUpdated = 0,
  NotInNVD = 1,
  TimeGap = 2,
}

@Injectable({
  providedIn: 'root'
})
export class ChartsService {
  private chartData: ReplaySubject<SingleDatum[][]>;
  constructor(api: ApiService) {
    this.chartData = new ReplaySubject(1)
    api.countGraphs((res: any) => {
      const data = res.map.mainPageCounts.map
      const { CvesAdded, CvesUpdated, avgTimeGapMitre, avgTimeGapNvd, not_in_mitre_count, not_in_nvd_count, run_date_times } = data;

      const dates = run_date_times.split(";").map((d: string) => new Date(d));


      const addedOrUpdatedSeries = this.makeAddedOrUpdatedSeries(
        CvesAdded.split(";").map((d: string) => parseInt(d)),
        CvesUpdated.split(";").map((d: string) => parseInt(d)),
        dates
      )

      const notInNvdSeries = this.makeNotInNVDSeries(
        not_in_nvd_count.split(";").map((d: string) => parseInt(d)),
        dates
      )

      const avgTimeGapNvdSeries = this.makeAverageGapTimeSeries(
        avgTimeGapNvd.split(";").map((d: string) => parseInt(d)),
        dates
      )

      this.chartData.next([addedOrUpdatedSeries, notInNvdSeries, avgTimeGapNvdSeries])
    })
  }

  private makeAddedOrUpdatedSeries(cveAdded: number[], cveUpdated: number[], dates: Date[]) {
    return dates.map((dateTime: Date, index: number) => ({ value: cveAdded[index] + cveUpdated[index], dateTime }));
  }

  private makeNotInNVDSeries(notInNvdCount: number[], dates: Date[]) {
    return dates.map((dateTime: Date, index: number) => ({ value: notInNvdCount[index], dateTime }))
  }

  private makeAverageGapTimeSeries(avgTimeGapNvd: number[], dates: Date[]) {
    return dates.map((dateTime: Date, index: number) => ({ value: avgTimeGapNvd[index], dateTime }))
  }

  getData(chartIndex: ChartType): SingleDatum[] {
    return testData
  }
}
